# pyproject.toml - Modern Python Packaging (2025 Standards)
[build-system]
requires = ["hatchling>=1.21.0"]
build-backend = "hatchling.build"

[project]
name = "aura-intelligence"
version = "2025.1.0"
description = "Ultimate AI Intelligence Platform - Hybrid Architecture"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "AURA Team", email = "team@aura.ai"},
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.12"
dependencies = [
    # Core dependencies
    "pydantic>=2.5.0",
    "structlog>=23.2.0",
    "asyncio-mqtt>=0.16.0",
    
    # Performance and ML
    "torch>=2.1.0",
    "numpy>=1.26.0",
    "transformers>=4.36.0",
    
    # Storage and databases
    "redis[hiredis]>=5.0.0",
    "neo4j>=5.15.0",
    
    # Web and API
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    
    # Observability
    "opentelemetry-api>=1.21.0",
    "prometheus-client>=0.19.0",
    
    # Utilities
    "click>=8.1.0",
    "rich>=13.7.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-benchmark>=4.0.0",
    "black>=23.11.0",
    "ruff>=0.1.6",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
]

# Documentation dependencies
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
]

# Performance dependencies
performance = [
    "uvloop>=0.19.0",
    "orjson>=3.9.0",
    "cython>=3.0.0",
    "numba>=0.58.0",
]

# Rust extensions (optional)
rust = [
    "maturin>=1.4.0",
]

# Mojo integration (future)
mojo = [
    # Will be added when Mojo is production-ready
]

# Enterprise features
enterprise = [
    "kubernetes>=28.1.0",
    "boto3>=1.34.0",
    "azure-identity>=1.15.0",
    "google-cloud-core>=2.4.0",
]

# All optional dependencies
all = [
    "aura-intelligence[dev,docs,performance,rust,enterprise]"
]

[project.urls]
Homepage = "https://github.com/aura-ai/aura-intelligence"
Documentation = "https://docs.aura.ai"
Repository = "https://github.com/aura-ai/aura-intelligence"
Issues = "https://github.com/aura-ai/aura-intelligence/issues"
Changelog = "https://github.com/aura-ai/aura-intelligence/blob/main/CHANGELOG.md"

[project.scripts]
aura = "aura.cli:main"
aura-agent = "aura.agents.cli:main"
aura-benchmark = "aura.performance.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["aura"]

[tool.hatch.build.targets.sdist]
exclude = [
    "/.github",
    "/docs",
    "/tests",
    "/.kiro",
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff configuration
[tool.ruff]
target-version = "py312"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["S101", "D"]

# MyPy configuration
[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "transformers.*",
    "redis.*",
    "neo4j.*",
    "prometheus_client.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=aura",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "performance: marks tests as performance tests",
    "gpu: marks tests that require GPU",
    "mojo: marks tests that require Mojo runtime",
    "rust: marks tests that require Rust extensions",
]

# Coverage configuration
[tool.coverage.run]
source = ["aura"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
# Kubernetes deployment for AURA Intelligence System
apiVersion: v1
kind: Namespace
metadata:
  name: aura-system
  labels:
    name: aura-system
---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: aura-config
  namespace: aura-system
data:
  PYTHONPATH: "/app/core/src"
  AURA_LOG_LEVEL: "INFO"
  AURA_METRICS_ENABLED: "true"
  AURA_HEALTH_CHECK_INTERVAL: "30"
---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: aura-secrets
  namespace: aura-system
type: Opaque
data:
  # Base64 encoded values (replace with actual secrets)
  redis-password: YXVyYV9yZWRpcw==  # aura_redis
  api-key: YXVyYV9hcGlfa2V5  # aura_api_key
---
# AURA Intelligence API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: aura-api
  namespace: aura-system
  labels:
    app: aura-api
    version: v2.1.0
spec:
  replicas: 3
  selector:
    matchLabels:
      app: aura-api
  template:
    metadata:
      labels:
        app: aura-api
        version: v2.1.0
    spec:
      containers:
      - name: aura-api
        image: aura-intelligence:v2.1.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8003
          name: http
        env:
        - name: PYTHONPATH
          valueFrom:
            configMapKeyRef:
              name: aura-config
              key: PYTHONPATH
        - name: AURA_LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: aura-config
              key: AURA_LOG_LEVEL
        - name: AURA_METRICS_ENABLED
          valueFrom:
            configMapKeyRef:
              name: aura-config
              key: AURA_METRICS_ENABLED
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8003
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8003
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 5
        volumeMounts:
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: logs
        emptyDir: {}
      restartPolicy: Always
---
# AURA API Service
apiVersion: v1
kind: Service
metadata:
  name: aura-api-service
  namespace: aura-system
  labels:
    app: aura-api
spec:
  selector:
    app: aura-api
  ports:
  - port: 8003
    targetPort: 8003
    protocol: TCP
    name: http
  type: ClusterIP
---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: aura-api-hpa
  namespace: aura-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: aura-api
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: aura-ingress
  namespace: aura-system
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - aura-api.yourdomain.com
    secretName: aura-tls
  rules:
  - host: aura-api.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: aura-api-service
            port:
              number: 8003
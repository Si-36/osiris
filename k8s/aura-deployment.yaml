apiVersion: apps/v1
kind: Deployment
metadata:
  name: aura-intelligence
  namespace: aura-intelligence
  labels:
    app.kubernetes.io/name: aura-intelligence
    app.kubernetes.io/component: api
    app.kubernetes.io/version: "2025.1.0"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: aura-intelligence
  template:
    metadata:
      labels:
        app.kubernetes.io/name: aura-intelligence
        app.kubernetes.io/component: api
        app.kubernetes.io/version: "2025.1.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: aura-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: aura-intelligence
        image: aura-intelligence:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 8081  
          name: dashboard
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: PYTHONPATH
          value: "/app/core/src:/app"
        envFrom:
        - configMapRef:
            name: aura-config
        - secretRef:
            name: aura-secrets
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
            nvidia.com/gpu: "1"
          limits:
            memory: "4Gi"
            cpu: "2000m"
            nvidia.com/gpu: "1"
        volumeMounts:
        - name: model-cache
          mountPath: /app/model_cache
        - name: logs
          mountPath: /app/logs
        - name: prometheus-multiproc
          mountPath: /tmp/prometheus_multiproc
        startupProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 120
          periodSeconds: 10
          timeoutSeconds: 30
          failureThreshold: 12
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: model-cache
        persistentVolumeClaim:
          claimName: model-cache-pvc
      - name: logs
        emptyDir:
          sizeLimit: 5Gi
      - name: prometheus-multiproc
        emptyDir:
          sizeLimit: 1Gi
      nodeSelector:
        accelerator: nvidia-gpu
      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
      - key: node-role.kubernetes.io/gpu
        operator: Exists
        effect: NoSchedule

---
apiVersion: v1
kind: Service
metadata:
  name: aura-service
  namespace: aura-intelligence
  labels:
    app.kubernetes.io/name: aura-intelligence
    app.kubernetes.io/component: api
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
spec:
  selector:
    app.kubernetes.io/name: aura-intelligence
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  - port: 8081
    targetPort: 8081
    protocol: TCP
    name: dashboard
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: metrics
  type: ClusterIP

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aura-service-account
  namespace: aura-intelligence
  labels:
    app.kubernetes.io/name: aura-intelligence
{
  "summary": {
    "total_files": 966,
    "real_implementations": 1164,
    "dummy_implementations": 45,
    "import_errors": 12,
    "api_endpoints": 18,
    "test_files": 120,
    "docker_files": 9,
    "config_files": 47,
    "ml_models": 64,
    "gpu_features": 51,
    "distributed_features": 269
  },
  "external_dependencies": [
    "Authlib",
    "GPUtil",
    "Jinja2",
    "MarkupSafe",
    "PyYAML",
    "Pygments",
    "SQLAlchemy",
    "__future__",
    "a2a",
    "a2a_protocol",
    "abc",
    "accelerate",
    "action",
    "activities",
    "adapters",
    "advanced_chaos",
    "advanced_neural_optimization",
    "advanced_processing",
    "agent",
    "agent_factory",
    "agents",
    "aio-pika",
    "aiocache",
    "aiodns",
    "aiofiles",
    "aiohappyeyeballs",
    "aiohttp",
    "aiokafka",
    "aioredis",
    "aiosignal",
    "aiosqlite",
    "alembic",
    "alerting",
    "algorithms",
    "analysis",
    "analyst",
    "annotated-types",
    "annoy",
    "ant_colony_detection",
    "anthropic",
    "anyio",
    "api",
    "apscheduler",
    "architectures",
    "archive",
    "argparse",
    "ast",
    "async-timeout",
    "asyncio",
    "asyncio-nats-client",
    "asyncpg",
    "atomic",
    "atomic_base",
    "attention",
    "attrs",
    "aura",
    "aura_benchmark_100_agents",
    "aura_common",
    "aura_intelligence",
    "avro",
    "azure-storage-blob",
    "backoff",
    "base",
    "base64",
    "base_compat",
    "base_interfaces",
    "bcc",
    "benchmark_framework",
    "bio_agent",
    "bio_homeostatic",
    "bisect",
    "black",
    "boto3",
    "botocore",
    "brian2",
    "bulkhead",
    "bus_protocol",
    "bus_redis",
    "business_metrics",
    "byzantine",
    "cache",
    "cachetools",
    "causal_store",
    "celery",
    "cerberus",
    "certifi",
    "cffi",
    "chaos",
    "chaos_engineering",
    "charset-normalizer",
    "checkpoint_manager",
    "checkpoints",
    "chromadb",
    "circle",
    "circuit_breaker",
    "cirq",
    "click",
    "client",
    "cloud_integration",
    "collections",
    "collective",
    "collectors",
    "common",
    "communication",
    "component",
    "components",
    "comprehensive_testing",
    "concurrent",
    "confidence_scoring",
    "config",
    "confluent-kafka",
    "confluent_kafka",
    "connectors",
    "consciousness",
    "consensus",
    "consolidated_agents",
    "constitutional",
    "consumers",
    "context_aware_lnn",
    "context_encoder",
    "context_engine",
    "context_integration",
    "context_managers",
    "contextlib",
    "contextvars",
    "contracts",
    "coordination_core",
    "coordination_manager",
    "coordinator",
    "coral",
    "core",
    "core_agent",
    "core_api",
    "correlation",
    "council_agent",
    "crewai",
    "crewai_flows",
    "crypto",
    "cryptography",
    "ctypes",
    "cuda_kernels",
    "cuml",
    "cupy",
    "cupy-cuda11x",
    "cupyx",
    "cython",
    "dash",
    "dask[complete]",
    "data_structures",
    "database",
    "dataclasses",
    "datetime",
    "decision",
    "decision_pipeline",
    "decorators",
    "demo_observability_cockpit",
    "demos",
    "deployment",
    "deps",
    "distributed",
    "distributed_coordinator",
    "distributed_tda",
    "distro",
    "docker",
    "dotenv",
    "dpo",
    "duckdb",
    "durable",
    "dynamics",
    "einops",
    "email",
    "endpoints",
    "engine",
    "enhanced_integration",
    "enhanced_knowledge_graph",
    "enhanced_ultimate_api_system",
    "enum",
    "enums",
    "error_handler",
    "error_topology",
    "error_utils",
    "errors",
    "event_adapters",
    "event_patterns",
    "event_router",
    "event_store",
    "events",
    "evidence",
    "exceptions",
    "executive_functions",
    "executor",
    "extractor",
    "factory",
    "faiss",
    "faiss-cpu",
    "fallback",
    "fallback_agent",
    "fastapi",
    "fastavro",
    "fastrp",
    "fastrp_embeddings",
    "feature_flags",
    "filelock",
    "flake8",
    "flash_attn",
    "flow_engine",
    "frozenlist",
    "fsspec",
    "functools",
    "fusion_scorer",
    "gc",
    "gemini_client",
    "generic_agent",
    "geometric_space",
    "giotto",
    "giotto-tda",
    "giotto_tda",
    "global_workspace",
    "google",
    "google-cloud-storage",
    "google-generativeai",
    "googleapis-common-protos",
    "governance",
    "gpu_acceleration",
    "gpu_allocation",
    "graph",
    "graph-tool",
    "graph_builder",
    "graphdatascience",
    "greenlet",
    "grpcio",
    "gtda",
    "guardian_agent",
    "guardrails",
    "gudhi",
    "gunicorn",
    "gzip",
    "h11",
    "h2",
    "handlers",
    "hashlib",
    "health_monitor",
    "heapq",
    "hierarchical_orchestrator",
    "hiredis",
    "hmac",
    "hnswlib",
    "homeostatic_coordinator",
    "hpack",
    "http",
    "httpcore",
    "httpx",
    "httpx-sse",
    "huggingface_hub",
    "human_approval",
    "hybrid",
    "hybrid_checkpointer",
    "hyperframe",
    "hypothesis",
    "idna",
    "igraph",
    "implementations",
    "importlib",
    "importlib_metadata",
    "incremental_persistence",
    "inference",
    "infrastructure",
    "ingest",
    "iniconfig",
    "inspect",
    "instrumentation",
    "integration",
    "integrations",
    "interfaces",
    "io",
    "isort",
    "jaeger-client",
    "jinja2",
    "jiter",
    "jmespath",
    "joblib",
    "json",
    "jsonpatch",
    "jsonpointer",
    "jsonschema",
    "jwt",
    "k6",
    "kafka",
    "kafka-python",
    "kafka_connector",
    "kafka_event_mesh",
    "knn_index",
    "knn_index_real",
    "knowledge_context",
    "knowledge_graph",
    "kubernetes",
    "langchain",
    "langchain-community",
    "langchain-core",
    "langchain-text-splitters",
    "langchain_community",
    "langchain_core",
    "langchain_openai",
    "langgraph",
    "langgraph-checkpoint",
    "langgraph-checkpoint-postgres",
    "langgraph-prebuilt",
    "langgraph-sdk",
    "langgraph_orchestrator",
    "langgraph_workflows",
    "langmem",
    "langsmith",
    "langsmith_integration",
    "layer",
    "layers",
    "lightgbm",
    "liquid_s4",
    "llama_index",
    "lmdb",
    "lnn",
    "lnn_consensus",
    "lnn_council_agent",
    "lnn_council_system",
    "load_balancing",
    "loaders",
    "locust",
    "logging",
    "lz4",
    "manager",
    "marshmallow",
    "math",
    "matplotlib",
    "max",
    "mcp_communication_hub",
    "mcp_integration",
    "mem0",
    "mem0_adapter",
    "mem0_hot",
    "mem0_neo4j_bridge",
    "mem0_search",
    "mem0_semantic",
    "mem0ai",
    "memory",
    "memory-profiler",
    "memory_context",
    "memory_hooks",
    "memory_learning",
    "memory_manager",
    "metabolic_manager",
    "metrics",
    "middleware",
    "minio",
    "mixture_of_depths",
    "mlflow",
    "mmap",
    "models",
    "moe",
    "monitoring",
    "motor",
    "mpmath",
    "msgpack",
    "multi_parameter_persistence",
    "multidict",
    "multimethod",
    "multiprocessing",
    "mypy",
    "nats",
    "nats-py",
    "nats_a2a",
    "ncps",
    "nengo",
    "neo4j",
    "neo4j_adapter",
    "netifaces",
    "networkx",
    "neural",
    "neural_engine",
    "neural_metrics",
    "neuromorphic",
    "nexus-rpc",
    "norse",
    "numba",
    "numpy",
    "nvidia-cublas-cu12",
    "nvidia-cuda-cupti-cu12",
    "nvidia-cuda-nvrtc-cu12",
    "nvidia-cuda-runtime-cu12",
    "nvidia-cudnn-cu12",
    "nvidia-cufft-cu12",
    "nvidia-cufile-cu12",
    "nvidia-curand-cu12",
    "nvidia-cusolver-cu12",
    "nvidia-cusparse-cu12",
    "nvidia-cusparselt-cu12",
    "nvidia-nccl-cu12",
    "nvidia-nvjitlink-cu12",
    "nvidia-nvtx-cu12",
    "observability",
    "observer",
    "openai",
    "opencv-python",
    "opentelemetry",
    "opentelemetry-api",
    "opentelemetry-exporter-jaeger",
    "opentelemetry-exporter-otlp",
    "opentelemetry-exporter-otlp-proto-common",
    "opentelemetry-exporter-otlp-proto-grpc",
    "opentelemetry-exporter-otlp-proto-http",
    "opentelemetry-exporter-prometheus",
    "opentelemetry-instrumentation",
    "opentelemetry-instrumentation-aiohttp-client",
    "opentelemetry-instrumentation-dbapi",
    "opentelemetry-instrumentation-fastapi",
    "opentelemetry-instrumentation-httpx",
    "opentelemetry-instrumentation-langchain",
    "opentelemetry-instrumentation-psycopg2",
    "opentelemetry-instrumentation-redis",
    "opentelemetry-instrumentation-requests",
    "opentelemetry-instrumentation-sqlalchemy",
    "opentelemetry-proto",
    "opentelemetry-sdk",
    "opentelemetry-semantic-conventions",
    "opentelemetry-util-http",
    "opentelemetry_integration",
    "operator",
    "optimizer_agent",
    "optuna",
    "orchestration",
    "orchestrator",
    "orjson",
    "ormsgpack",
    "os",
    "ot",
    "packaging",
    "pandas",
    "parallel_processor",
    "passlib",
    "passlib[bcrypt]",
    "pathlib",
    "pennylane",
    "persim",
    "persistence",
    "pgvector",
    "phformer2",
    "phformer_integration",
    "phoenix",
    "pickle",
    "pika",
    "pillow",
    "pinecone-client",
    "pipeline",
    "platform",
    "plotext",
    "plotly",
    "pluggy",
    "pmem",
    "polars",
    "portalocker",
    "posthog",
    "pre-commit",
    "prediction",
    "prefect",
    "producers",
    "production_integration_2025",
    "production_monitoring_system",
    "production_observer_agent",
    "production_wiring",
    "prometheus-client",
    "prometheus-fastapi-instrumentator",
    "prometheus_client",
    "prometheus_metrics",
    "propcache",
    "prophet",
    "protobuf",
    "protocol",
    "provider",
    "psutil",
    "psycopg",
    "psycopg-pool",
    "psycopg2",
    "psycopg2-binary",
    "psycopg_pool",
    "py-cpuinfo",
    "py2neo",
    "py4j",
    "pyarrow",
    "pybreaker",
    "pycparser",
    "pycuda",
    "pydantic",
    "pydantic-settings",
    "pydantic_core",
    "pydantic_settings",
    "pyjwt",
    "pymongo",
    "pynvml",
    "pytest",
    "pytest-asyncio",
    "pytest-benchmark",
    "pytest-cov",
    "pytest-mock",
    "pytest-timeout",
    "pytest-xdist",
    "python-dateutil",
    "python-dotenv",
    "python-jose",
    "python-jose[cryptography]",
    "python-json-logger",
    "python-multipart",
    "pythonjsonlogger",
    "pytorch-lightning",
    "pytz",
    "pyyaml",
    "qdrant-client",
    "qdrant_client",
    "qiskit",
    "queue",
    "raft",
    "random",
    "rank",
    "ray",
    "ray[default]",
    "ray[serve]",
    "ray_orchestrator",
    "re",
    "real_aura",
    "real_components",
    "real_time_dashboard",
    "recovery",
    "redis",
    "redis-py-cluster",
    "redis[hiredis]",
    "redis_adapter",
    "redis_store",
    "registry",
    "requests",
    "requests-toolbelt",
    "research_2025",
    "researcher_agent",
    "resilience",
    "retry",
    "retry_handler",
    "retry_policy",
    "rich",
    "ripser",
    "ripser_mt",
    "risk_engine",
    "rocksdb",
    "ruff",
    "s3transfer",
    "saga_patterns",
    "scaling",
    "schedule",
    "scheduler",
    "schema",
    "schemas",
    "scikit-learn",
    "scikit-tda",
    "scipy",
    "seaborn",
    "search",
    "search_api",
    "secrets",
    "security",
    "self_healing",
    "semantic",
    "semantic_orchestrator",
    "semantic_patterns",
    "semantic_router",
    "sentence-transformers",
    "sentence_transformers",
    "services",
    "settings",
    "setuptools",
    "shadow_mode",
    "shap",
    "shape_aware_memory",
    "shape_memory_v2",
    "shape_memory_v2_clean",
    "shape_memory_v2_prod",
    "shutil",
    "signal",
    "simple_agent",
    "simple_chain",
    "sinabs",
    "six",
    "sklearn",
    "sklearn_tda",
    "slack_sdk",
    "smtplib",
    "sniffio",
    "snntorch",
    "socket",
    "spiking",
    "spikingjelly",
    "sqlalchemy",
    "sqlite3",
    "src",
    "starlette",
    "state",
    "statistics",
    "steps",
    "storage_interface",
    "strawberry",
    "streaming",
    "streaming_processor",
    "streams",
    "struct",
    "structlog",
    "structured",
    "structured_logging",
    "subprocess",
    "supervisor",
    "swarm_intelligence",
    "sympy",
    "sync",
    "sys",
    "tda",
    "tda_engine",
    "tda_integration",
    "tda_neo4j_bridge",
    "telemetry",
    "tempfile",
    "temporal_connector",
    "temporal_orchestrator",
    "temporalio",
    "tenacity",
    "tensorflow",
    "test_enhanced_systems",
    "test_gradual_integration",
    "test_guardrails",
    "test_memory_supervisor",
    "test_production_tda",
    "test_real_collective_intelligence",
    "testcontainers",
    "text_preprocessor",
    "textdistance",
    "threading",
    "threadpoolctl",
    "time",
    "timeout",
    "toml",
    "tools",
    "topo_features",
    "torch",
    "torch-geometric",
    "torch-scatter",
    "torch-sparse",
    "torch_geometric",
    "torchaudio",
    "torchdiffeq",
    "torchvision",
    "toxiproxy",
    "toxiproxy-python",
    "tqdm",
    "traceback",
    "tracecontext",
    "tracers",
    "tracing",
    "training",
    "transformer",
    "transformers",
    "triton",
    "typer",
    "types",
    "types-protobuf",
    "typing",
    "typing-inspection",
    "typing_extensions",
    "tzdata",
    "ujson",
    "ultimate_api_system",
    "ultimate_core_api",
    "ultimate_endpoints",
    "unicodedata",
    "unified_agents",
    "unified_brain",
    "unified_config",
    "unified_engine",
    "unified_interfaces",
    "unified_system",
    "unittest",
    "urllib",
    "urllib3",
    "utilities",
    "utils",
    "uuid",
    "uvicorn",
    "uvicorn[standard]",
    "uvloop",
    "v2",
    "validation",
    "validator",
    "validators",
    "variants",
    "vector_database",
    "vector_search",
    "vectorize",
    "wandb",
    "warnings",
    "weakref",
    "weaviate-client",
    "webbrowser",
    "websocket",
    "websocket-client",
    "websockets",
    "wheel",
    "windows",
    "worker",
    "workflow",
    "workflows",
    "wrapt",
    "xgboost",
    "xxhash",
    "yaml",
    "yarl",
    "zipp",
    "zlib",
    "zstandard"
  ],
  "dummy_implementations": [
    {
      "file": "/workspace/core/src/aura_intelligence/enterprise/__init__.py",
      "function": "__init__",
      "type": "pass"
    },
    {
      "file": "/workspace/core/src/aura_intelligence/enterprise/__init__.py",
      "function": "__init__",
      "type": "pass"
    },
    {
      "file": "/workspace/core/src/aura_intelligence/enterprise/__init__.py",
      "function": "__init__",
      "type": "pass"
    },
    {
      "file": "/workspace/core/src/aura_intelligence/enterprise/__init__.py",
      "function": "__init__",
      "type": "pass"
    },
    {
      "file": "/workspace/core/src/aura_intelligence/integrations/__init__.py",
      "function": "__init__",
      "type": "pass"
    },
    {
      "file": "/workspace/core/src/aura_intelligence/integrations/__init__.py",
      "function": "__init__",
      "type": "pass"
    },
    {
      "file": "/workspace/core/src/aura_intelligence/integrations/__init__.py",
      "function": "__init__",
      "type": "pass"
    },
    {
      "file": "/workspace/core/src/aura_intelligence/integrations/__init__.py",
      "function": "__init__",
      "type": "pass"
    },
    {
      "file": "/workspace/core/src/aura_intelligence/integrations/__init__.py",
      "function": "__init__",
      "type": "pass"
    },
    {
      "file": "/workspace/core/src/aura_intelligence/collective/context_engine.py",
      "function": "__init__",
      "type": "pass"
    },
    {
      "file": "/workspace/core/src/aura_intelligence/collective/context_engine.py",
      "function": "__init__",
      "type": "pass"
    },
    {
      "file": "/workspace/core/src/aura_intelligence/collective/context_engine.py",
      "function": "__init__",
      "type": "pass"
    },
    {
      "file": "/workspace/core/src/aura_intelligence/collective/memory_manager.py",
      "function": "__init__",
      "type": "pass"
    },
    {
      "file": "/workspace/core/src/aura_intelligence/collective/graph_builder.py",
      "function": "__init__",
      "type": "pass"
    },
    {
      "file": "/workspace/core/src/aura_intelligence/collective/graph_builder.py",
      "function": "add_node",
      "type": "pass"
    },
    {
      "file": "/workspace/core/src/aura_intelligence/collective/graph_builder.py",
      "function": "add_edge",
      "type": "pass"
    },
    {
      "file": "/workspace/core/src/aura_intelligence/collective/graph_builder.py",
      "function": "add_conditional_edges",
      "type": "pass"
    },
    {
      "file": "/workspace/core/src/aura_intelligence/collective/graph_builder.py",
      "function": "set_entry_point",
      "type": "pass"
    },
    {
      "file": "/workspace/core/src/aura_intelligence/collective/graph_builder.py",
      "function": "__init__",
      "type": "pass"
    },
    {
      "file": "/workspace/core/src/aura_intelligence/collective/supervisor.py",
      "function": "__init__",
      "type": "pass"
    }
  ],
  "real_implementations": [
    {
      "file": "/workspace/start_infrastructure_monitor.py",
      "function": "create_project_structure",
      "lines": 5
    },
    {
      "file": "/workspace/start_infrastructure_monitor.py",
      "function": "create_basic_collector",
      "lines": 4
    },
    {
      "file": "/workspace/start_infrastructure_monitor.py",
      "function": "create_simple_api",
      "lines": 4
    },
    {
      "file": "/workspace/start_infrastructure_monitor.py",
      "function": "create_readme",
      "lines": 4
    },
    {
      "file": "/workspace/REAL_RAY_SYSTEM.py",
      "function": "__init__",
      "lines": 4
    },
    {
      "file": "/workspace/REAL_RAY_SYSTEM.py",
      "function": "process",
      "lines": 5
    },
    {
      "file": "/workspace/REAL_RAY_SYSTEM.py",
      "function": "__init__",
      "lines": 4
    },
    {
      "file": "/workspace/ULTIMATE_AURA_PRODUCTION_2025.py",
      "function": "__init__",
      "lines": 10
    },
    {
      "file": "/workspace/test_real_aura_intelligence.py",
      "function": "test_real_tda",
      "lines": 19
    },
    {
      "file": "/workspace/test_real_aura_intelligence.py",
      "function": "test_real_lnn",
      "lines": 5
    },
    {
      "file": "/workspace/test_real_aura_intelligence.py",
      "function": "test_data_flow",
      "lines": 12
    },
    {
      "file": "/workspace/fix_all_components_step_by_step.py",
      "function": "fix_tda_algorithms",
      "lines": 5
    },
    {
      "file": "/workspace/fix_all_components_step_by_step.py",
      "function": "fix_lnn_variants",
      "lines": 5
    },
    {
      "file": "/workspace/fix_all_components_step_by_step.py",
      "function": "create_test_file",
      "lines": 5
    },
    {
      "file": "/workspace/test_demo.py",
      "function": "check_demo_features",
      "lines": 7
    },
    {
      "file": "/workspace/ultimate_aura_integration_system.py",
      "function": "_metrics_to_point_cloud",
      "lines": 10
    },
    {
      "file": "/workspace/REAL_DPO_SYSTEM.py",
      "function": "test_real_dpo_system",
      "lines": 9
    },
    {
      "file": "/workspace/REAL_DPO_SYSTEM.py",
      "function": "forward",
      "lines": 4
    },
    {
      "file": "/workspace/REAL_DPO_SYSTEM.py",
      "function": "__init__",
      "lines": 5
    },
    {
      "file": "/workspace/REAL_DPO_SYSTEM.py",
      "function": "tokenize",
      "lines": 3
    }
  ],
  "import_errors": [
    {
      "file": "/workspace/main.py",
      "error": "Syntax Error: expected an indented block after 'try' statement on line 57 (<unknown>, line 59)",
      "line": 59
    },
    {
      "file": "/workspace/utilities/fix_real_issues.py",
      "error": "Syntax Error: unterminated triple-quoted string literal (detected at line 324) (<unknown>, line 319)",
      "line": 319
    },
    {
      "file": "/workspace/core/src/aura_intelligence/streaming/kafka_integration.py",
      "error": "Syntax Error: expected an indented block after function definition on line 49 (<unknown>, line 50)",
      "line": 50
    },
    {
      "file": "/workspace/core/src/aura_intelligence/agents/supervisor.py",
      "error": "Syntax Error: expected an indented block after function definition on line 23 (<unknown>, line 24)",
      "line": 24
    },
    {
      "file": "/workspace/core/src/aura_intelligence/communication/collective/memory_manager.py",
      "error": "Syntax Error: expected an indented block after function definition on line 24 (<unknown>, line 25)",
      "line": 25
    },
    {
      "file": "/workspace/core/src/aura_intelligence/agents/base_classes/instrumentation.py",
      "error": "Syntax Error: expected an indented block after function definition on line 64 (<unknown>, line 65)",
      "line": 65
    },
    {
      "file": "/workspace/core/src/aura_intelligence/agents/base_classes/agent.py",
      "error": "Syntax Error: expected an indented block after function definition on line 49 (<unknown>, line 50)",
      "line": 50
    },
    {
      "file": "/workspace/core/src/aura_intelligence/orchestration/durable/test_workflow_observability.py",
      "error": "Syntax Error: invalid syntax (<unknown>, line 1)",
      "line": 1
    },
    {
      "file": "/workspace/core/src/aura_intelligence/orchestration/workflows/nodes/observer.py",
      "error": "Syntax Error: invalid syntax (<unknown>, line 14)",
      "line": 14
    },
    {
      "file": "/workspace/core/src/aura_intelligence/orchestration/workflows/nodes/supervisor.py",
      "error": "Syntax Error: invalid syntax (<unknown>, line 15)",
      "line": 15
    },
    {
      "file": "/workspace/core/src/aura_intelligence/orchestration/workflows/nodes/analyst.py",
      "error": "Syntax Error: invalid syntax (<unknown>, line 15)",
      "line": 15
    },
    {
      "file": "/workspace/src/aura/core/fixed_components.py",
      "error": "Syntax Error: unexpected indent (<unknown>, line 1598)",
      "line": 1598
    }
  ],
  "api_endpoints": [
    {
      "file": "/workspace/utilities/simple_working_aura.py",
      "function": "root",
      "decorator": "app.get('/')"
    },
    {
      "file": "/workspace/utilities/simple_working_aura.py",
      "function": "health",
      "decorator": "app.get('/health')"
    },
    {
      "file": "/workspace/utilities/simple_working_aura.py",
      "function": "think",
      "decorator": "app.post('/think')"
    },
    {
      "file": "/workspace/utilities/simple_working_aura.py",
      "function": "status",
      "decorator": "app.get('/status')"
    },
    {
      "file": "/workspace/src/aura/api/enhanced_aura_api.py",
      "function": "root",
      "decorator": "app.get('/')"
    },
    {
      "file": "/workspace/src/aura/api/enhanced_aura_api.py",
      "function": "health",
      "decorator": "app.get('/health')"
    },
    {
      "file": "/workspace/src/aura/api/enhanced_aura_api.py",
      "function": "enhanced_stats",
      "decorator": "app.get('/enhanced/stats')"
    },
    {
      "file": "/workspace/src/aura/api/minimal_api.py",
      "function": "root",
      "decorator": "app.get('/')"
    },
    {
      "file": "/workspace/src/aura/api/minimal_api.py",
      "function": "health",
      "decorator": "app.get('/health')"
    },
    {
      "file": "/workspace/src/aura/api/fixed_aura_api.py",
      "function": "root",
      "decorator": "app.get('/')"
    },
    {
      "file": "/workspace/src/aura/api/fixed_aura_api.py",
      "function": "health",
      "decorator": "app.get('/health')"
    },
    {
      "file": "/workspace/src/aura/api/fixed_aura_api.py",
      "function": "neural_process",
      "decorator": "app.post('/neural/process')"
    },
    {
      "file": "/workspace/src/aura/api/fixed_aura_api.py",
      "function": "system_status",
      "decorator": "app.get('/system/status')"
    },
    {
      "file": "/workspace/src/aura/api/production_aura_2025.py",
      "function": "root",
      "decorator": "app.get('/')"
    },
    {
      "file": "/workspace/src/aura/api/production_aura_2025.py",
      "function": "memory_stats",
      "decorator": "app.get('/memory/stats')"
    },
    {
      "file": "/workspace/src/aura/api/production_aura_2025.py",
      "function": "metabolic_status",
      "decorator": "app.get('/metabolic/status')"
    },
    {
      "file": "/workspace/src/aura/api/production_aura_2025.py",
      "function": "prometheus_metrics",
      "decorator": "app.get('/metrics', response_class=PlainTextResponse)"
    },
    {
      "file": "/workspace/src/aura/api/production_aura_2025.py",
      "function": "metrics_summary",
      "decorator": "app.get('/metrics/summary')"
    }
  ],
  "gpu_features": [
    {
      "file": "/workspace/aura_intelligence_api/ultimate_core_api.py",
      "feature": "cuda_kernels"
    },
    {
      "file": "/workspace/aura_intelligence_api/ultimate_core_api.py",
      "feature": "cuda_kernels"
    },
    {
      "file": "/workspace/aura_intelligence_api/ultimate_core_api.py",
      "feature": "cuda_kernels"
    },
    {
      "file": "/workspace/core/src/aura_intelligence/neural/lnn.py",
      "feature": "use_cuda"
    },
    {
      "file": "/workspace/core/src/aura_intelligence/tda/core.py",
      "feature": "CUDAAccelerator"
    },
    {
      "file": "/workspace/core/src/aura_intelligence/tda/matrix_ph_gpu.py",
      "feature": "cuda"
    },
    {
      "file": "/workspace/core/src/aura_intelligence/tda/matrix_ph_gpu.py",
      "feature": "cuda"
    },
    {
      "file": "/workspace/core/src/aura_intelligence/tda/matrix_ph_gpu.py",
      "feature": "cuda"
    },
    {
      "file": "/workspace/core/src/aura_intelligence/tda/matrix_ph_gpu.py",
      "feature": "cuda"
    },
    {
      "file": "/workspace/core/src/aura_intelligence/tda/matrix_ph_gpu.py",
      "feature": "cuda"
    }
  ],
  "distributed_features": [
    {
      "file": "/workspace/REAL_RAY_SYSTEM.py",
      "feature": "ray"
    },
    {
      "file": "/workspace/REAL_RAY_SYSTEM.py",
      "feature": "RealRaySystem"
    },
    {
      "file": "/workspace/REAL_RAY_SYSTEM.py",
      "feature": "test_real_ray_system"
    },
    {
      "file": "/workspace/REAL_RAY_SYSTEM.py",
      "feature": "ray"
    },
    {
      "file": "/workspace/REAL_RAY_SYSTEM.py",
      "feature": "ray"
    },
    {
      "file": "/workspace/REAL_RAY_SYSTEM.py",
      "feature": "ray"
    },
    {
      "file": "/workspace/REAL_RAY_SYSTEM.py",
      "feature": "ray"
    },
    {
      "file": "/workspace/REAL_RAY_SYSTEM.py",
      "feature": "ray"
    },
    {
      "file": "/workspace/REAL_RAY_SYSTEM.py",
      "feature": "ray"
    },
    {
      "file": "/workspace/REAL_RAY_SYSTEM.py",
      "feature": "ray"
    }
  ],
  "production_features": [
    "/workspace/ultimate_working_demo.py",
    "/workspace/start_infrastructure_monitor.py",
    "/workspace/REAL_RAY_SYSTEM.py",
    "/workspace/ULTIMATE_AURA_PRODUCTION_2025.py",
    "/workspace/comprehensive_integration_test.py",
    "/workspace/test_real_implementations.py",
    "/workspace/test_real_aura_intelligence.py",
    "/workspace/verify_final_status.py",
    "/workspace/start_monitoring_v2.py",
    "/workspace/setup_and_run.py"
  ],
  "test_coverage": {
    "test_files": 120,
    "examples": [
      "/workspace/final_demo_test.py",
      "/workspace/comprehensive_integration_test.py",
      "/workspace/test_real_implementations.py",
      "/workspace/test_real_aura_intelligence.py",
      "/workspace/test_demo.py",
      "/workspace/test_final_integration.py",
      "/workspace/test_aura_system.py",
      "/workspace/test_complete_system.py",
      "/workspace/deep_pipeline_test.py",
      "/workspace/test_everything_v2.py"
    ]
  }
}
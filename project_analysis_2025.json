{
  "summary": {
    "total_folders": 54,
    "total_files": 550,
    "dummy_files": 253,
    "needs_update": 148,
    "completion_rate": 54.0
  },
  "folders": {
    "__pycache__": {
      "total_files": 0,
      "dummy_files": 0,
      "needs_update": 0,
      "missing_init": true,
      "missing_tests": true,
      "files": {}
    },
    "adapters": {
      "total_files": 8,
      "dummy_files": 4,
      "needs_update": 0,
      "missing_init": false,
      "missing_tests": true,
      "files": {
        "adapters/tda_mem0_adapter.py": {
          "dummy_implementations": [
            {
              "line": 269,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# This is a placeholder that creates a feature vector"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "adapters/redis_high_performance.py": {
          "dummy_implementations": [
            {
              "line": 235,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 564,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "adapters/redis_adapter.py": {
          "dummy_implementations": [
            {
              "line": 231,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "adapters/tda_neo4j_adapter.py": {
          "dummy_implementations": [
            {
              "line": 361,
              "pattern": "return\\s*{\\s*}",
              "code": "return {}"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "advanced_processing": {
      "total_files": 3,
      "dummy_files": 1,
      "needs_update": 1,
      "missing_init": false,
      "missing_tests": true,
      "files": {
        "advanced_processing/real_pearl_inference.py": {
          "dummy_implementations": [
            {
              "line": 238,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [
            "dangerous eval/exec"
          ],
          "security_issues": []
        }
      }
    },
    "agents": {
      "total_files": 140,
      "dummy_files": 70,
      "needs_update": 32,
      "missing_init": false,
      "missing_tests": true,
      "files": {
        "agents/base.py": {
          "dummy_implementations": [
            {
              "line": 32,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 165,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 179,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 277,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 282,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/tda_analyzer.py": {
          "dummy_implementations": [
            {
              "line": 119,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Return mock response for testing"
            },
            {
              "line": 120,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return self._create_mock_tda_response(events)"
            },
            {
              "line": 125,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def _create_mock_tda_response(self, events: List[Dict[str, Any]]) -> TDAServiceResponse:"
            },
            {
              "line": 126,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Create mock TDA response for testing when service unavailable.\"\"\""
            },
            {
              "line": 132,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock topological analysis"
            },
            {
              "line": 152,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "request_id=\"mock_request\","
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/graph_enhanced_rl.py": {
          "dummy_implementations": [
            {
              "line": 223,
              "pattern": "pass\\s*$",
              "code": "# Forward pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/real_agent_system.py": {
          "dummy_implementations": [
            {
              "line": 10,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "- NO DUMMY IMPLEMENTATIONS"
            },
            {
              "line": 421,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 426,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 431,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 436,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 461,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 747,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/unified_agent_system.py": {
          "dummy_implementations": [
            {
              "line": 402,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 407,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 412,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 417,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 422,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 427,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 518,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 522,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 539,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 573,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 577,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/supervisor.py": {
          "dummy_implementations": [
            {
              "line": 21,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock classes for testing"
            },
            {
              "line": 31,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 101,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Use a mock KG manager"
            },
            {
              "line": 102,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockKGManager:"
            },
            {
              "line": 110,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "result = await self.invoke(state, MockKGManager())"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/steps.py": {
          "dummy_implementations": [
            {
              "line": 27,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/test_observability_standalone.py": {
          "dummy_implementations": [],
          "missing_features": [],
          "outdated_patterns": [
            "blocking sleep instead of async"
          ],
          "security_issues": []
        },
        "agents/council/test_models_standalone.py": {
          "dummy_implementations": [
            {
              "line": 16,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock AgentState for testing"
            },
            {
              "line": 18,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock agent state for testing.\"\"\""
            }
          ],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/test_kg_simple.py": {
          "dummy_implementations": [
            {
              "line": 11,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockLNNCouncilConfig:"
            },
            {
              "line": 23,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockGPURequest:"
            },
            {
              "line": 36,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockLNNCouncilState:"
            },
            {
              "line": 38,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "self.current_request = MockGPURequest()"
            },
            {
              "line": 42,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockNeo4jAdapter:"
            },
            {
              "line": 43,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock Neo4j adapter that simulates real database queries.\"\"\""
            },
            {
              "line": 52,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock initialization.\"\"\""
            },
            {
              "line": 54,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "print(\"   Neo4j adapter initialized (mock)\")"
            },
            {
              "line": 57,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock query execution with realistic responses.\"\"\""
            },
            {
              "line": 118,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 121,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock write operation.\"\"\""
            },
            {
              "line": 129,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock close.\"\"\""
            },
            {
              "line": 140,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def __init__(self, config: MockLNNCouncilConfig):"
            },
            {
              "line": 162,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "async def get_knowledge_context(self, state: MockLNNCouncilState) -> torch.Tensor:"
            },
            {
              "line": 350,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# For mock, we'll use simpler topology measures"
            },
            {
              "line": 381,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 385,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "neo4j_adapter = MockNeo4jAdapter()"
            },
            {
              "line": 390,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "state = MockLNNCouncilState()"
            },
            {
              "line": 413,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 416,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "neo4j_adapter = MockNeo4jAdapter()"
            },
            {
              "line": 420,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "request = MockGPURequest()"
            },
            {
              "line": 435,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 438,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "neo4j_adapter = MockNeo4jAdapter()"
            },
            {
              "line": 442,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "request = MockGPURequest()"
            },
            {
              "line": 456,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 459,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "neo4j_adapter = MockNeo4jAdapter()"
            },
            {
              "line": 463,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "request = MockGPURequest()"
            },
            {
              "line": 477,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 480,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "neo4j_adapter = MockNeo4jAdapter()"
            },
            {
              "line": 484,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "request = MockGPURequest()"
            },
            {
              "line": 498,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 501,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "neo4j_adapter = MockNeo4jAdapter()"
            },
            {
              "line": 505,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "request = MockGPURequest()"
            },
            {
              "line": 519,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 522,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "neo4j_adapter = MockNeo4jAdapter()"
            },
            {
              "line": 527,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "states = [MockLNNCouncilState() for _ in range(5)]"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/standalone_test.py": {
          "dummy_implementations": [
            {
              "line": 156,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockLiquidNeuralNetwork:"
            },
            {
              "line": 157,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock LNN for testing.\"\"\""
            },
            {
              "line": 165,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock forward pass.\"\"\""
            },
            {
              "line": 206,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Initialize mock LNN engine.\"\"\""
            },
            {
              "line": 207,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return MockLiquidNeuralNetwork("
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/lnn_council_agent.py": {
          "dummy_implementations": [
            {
              "line": 389,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Return a mock graph when LangGraph is not available"
            },
            {
              "line": 1092,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Test inference with dummy input"
            },
            {
              "line": 1093,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "dummy_input = torch.randn(1, self.lnn_config.input_size)"
            },
            {
              "line": 1095,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "dummy_input = dummy_input.cuda()"
            },
            {
              "line": 1098,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "_ = self.lnn_engine(dummy_input)"
            }
          ],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/test_context_simple.py": {
          "dummy_implementations": [
            {
              "line": 62,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Get mock user context.\"\"\""
            },
            {
              "line": 79,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Get mock system context.\"\"\""
            },
            {
              "line": 106,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock attention"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/production_lnn_council.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/test_components_direct.py": {
          "dummy_implementations": [
            {
              "line": 180,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Simple workflow engine mock that actually works"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/test_memory_integration.py": {
          "dummy_implementations": [
            {
              "line": 12,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockLNNCouncilConfig:"
            },
            {
              "line": 19,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockGPURequest:"
            },
            {
              "line": 32,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockGPUDecision:"
            },
            {
              "line": 41,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockLNNCouncilState:"
            },
            {
              "line": 43,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "self.current_request = MockGPURequest()"
            },
            {
              "line": 58,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 61,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "state = MockLNNCouncilState()"
            },
            {
              "line": 63,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Test memory context retrieval (will use mock data)"
            },
            {
              "line": 89,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 92,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "request = MockGPURequest()"
            },
            {
              "line": 93,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "decision = MockGPUDecision()"
            },
            {
              "line": 105,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "print(\"\u2705 Decision outcome stored (mock)\")"
            },
            {
              "line": 123,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 126,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "request = MockGPURequest()"
            },
            {
              "line": 127,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "decision = MockGPUDecision()"
            },
            {
              "line": 166,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 169,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "request = MockGPURequest()"
            },
            {
              "line": 170,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "decision = MockGPUDecision()"
            },
            {
              "line": 208,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 245,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 250,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "MockGPURequest(),"
            },
            {
              "line": 251,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "MockGPURequest(),"
            },
            {
              "line": 252,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "MockGPURequest()"
            },
            {
              "line": 256,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "MockGPUDecision(),"
            },
            {
              "line": 257,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "MockGPUDecision(),"
            },
            {
              "line": 258,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "MockGPUDecision()"
            },
            {
              "line": 292,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            }
          ],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [
            "dangerous eval/exec"
          ],
          "security_issues": []
        },
        "agents/council/test_context_aware.py": {
          "dummy_implementations": [
            {
              "line": 10,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock the required classes for testing"
            },
            {
              "line": 11,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockLNNCouncilConfig:"
            },
            {
              "line": 20,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockGPURequest:"
            },
            {
              "line": 35,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockLNNCouncilState:"
            },
            {
              "line": 37,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "self.current_request = MockGPURequest()"
            },
            {
              "line": 54,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 57,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "request = MockGPURequest()"
            },
            {
              "line": 81,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 84,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "state = MockLNNCouncilState()"
            },
            {
              "line": 106,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 109,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "state = MockLNNCouncilState()"
            },
            {
              "line": 134,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 141,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "state = MockLNNCouncilState()"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/test_end_to_end_integration.py": {
          "dummy_implementations": [
            {
              "line": 9,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "- Real neural network inference (no mocks)"
            },
            {
              "line": 239,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"model_path\": None,  # Use default/mock model for testing"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/models.py": {
          "dummy_implementations": [
            {
              "line": 15,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Create mock objects"
            },
            {
              "line": 16,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockExporter:"
            },
            {
              "line": 17,
              "pattern": "pass\\s*$",
              "code": "def __init__(self, *args, **kwargs): pass"
            },
            {
              "line": 20,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockTrace:"
            },
            {
              "line": 29,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "jaeger = type('jaeger', (), {'JaegerExporter': MockExporter})"
            },
            {
              "line": 30,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "trace = MockTrace()"
            },
            {
              "line": 17,
              "pattern": "empty function",
              "code": "def __init__(...): pass"
            }
          ],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/test_simple_components.py": {
          "dummy_implementations": [
            {
              "line": 148,
              "pattern": "pass\\s*$",
              "code": "# Test forward pass"
            },
            {
              "line": 199,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "0.7,  # Mock user authority"
            },
            {
              "line": 200,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "0.8,  # Mock project priority"
            },
            {
              "line": 201,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "0.6,  # Mock resource availability"
            },
            {
              "line": 217,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Create mock request"
            },
            {
              "line": 218,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockRequest:"
            },
            {
              "line": 226,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "request = MockRequest()"
            },
            {
              "line": 285,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "0.7, 0.8, 0.6, 0.5, 0.4, 0.3  # Mock additional features"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/test_real_system_integration.py": {
          "dummy_implementations": [
            {
              "line": 3,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "REAL System Integration Test - No Mocks, No Fakes"
            },
            {
              "line": 18,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "print(\"\ud83d\udd25 REAL System Integration Test - No Mocks, No Lies\")"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/test_integration_standalone.py": {
          "dummy_implementations": [
            {
              "line": 16,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock components for standalone testing"
            },
            {
              "line": 18,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockGPURequest:"
            },
            {
              "line": 19,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock GPU allocation request.\"\"\""
            },
            {
              "line": 35,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockGPUDecision:"
            },
            {
              "line": 36,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock GPU allocation decision.\"\"\""
            },
            {
              "line": 45,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockLNNCouncilAgent:"
            },
            {
              "line": 46,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock LNN Council Agent for integration testing.\"\"\""
            },
            {
              "line": 50,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "self.name = config.get(\"name\", \"mock_agent\")"
            },
            {
              "line": 54,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "async def process(self, request: MockGPURequest) -> MockGPUDecision:"
            },
            {
              "line": 70,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return MockGPUDecision("
            },
            {
              "line": 78,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def _make_decision(self, request: MockGPURequest) -> str:"
            },
            {
              "line": 113,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def _calculate_confidence(self, request: MockGPURequest, decision: str) -> float:"
            },
            {
              "line": 130,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def _generate_reasoning(self, request: MockGPURequest, decision: str) -> List[str]:"
            },
            {
              "line": 248,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Initialize mock agent"
            },
            {
              "line": 257,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "agent = MockLNNCouncilAgent(config)"
            },
            {
              "line": 281,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "agent = MockLNNCouncilAgent({\"name\": \"workflow_test\"})"
            },
            {
              "line": 284,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "request = MockGPURequest("
            },
            {
              "line": 325,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "agent = MockLNNCouncilAgent({\"name\": \"quality_test\"})"
            },
            {
              "line": 331,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"request\": MockGPURequest(\"researcher_001\", \"critical_ml\", \"A100\", 2, 40, 8.0, 9),"
            },
            {
              "line": 337,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"request\": MockGPURequest(\"student_001\", \"learning\", \"V100\", 8, 32, 100.0, 1),"
            },
            {
              "line": 343,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"request\": MockGPURequest(\"regular_user\", \"standard\", \"RTX4090\", 4, 24, 48.0, 4),"
            },
            {
              "line": 389,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "agent = MockLNNCouncilAgent({\"name\": \"perf_test\"})"
            },
            {
              "line": 393,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "(\"simple_request\", MockGPURequest(\"user1\", \"proj1\", \"A100\", 1, 40, 4.0, 5)),"
            },
            {
              "line": 394,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "(\"complex_request\", MockGPURequest(\"user2\", \"proj2\", \"H100\", 4, 80, 24.0, 8)),"
            },
            {
              "line": 395,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "(\"large_request\", MockGPURequest(\"user3\", \"proj3\", \"V100\", 8, 32, 72.0, 3))"
            },
            {
              "line": 476,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "agent = MockLNNCouncilAgent({\"name\": \"load_test\"})"
            },
            {
              "line": 481,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "MockGPURequest(f\"user_{i}\", f\"project_{i}\", \"A100\", 1, 40, 4.0, 5)"
            },
            {
              "line": 596,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "agent = MockLNNCouncilAgent({\"name\": \"e2e_test\"})"
            },
            {
              "line": 602,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"request\": MockGPURequest(\"researcher_ai\", \"critical_research\", \"H100\", 4, 80, 16.0, 9),"
            },
            {
              "line": 607,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"request\": MockGPURequest(\"student_123\", \"coursework\", \"RTX4090\", 1, 24, 4.0, 3),"
            },
            {
              "line": 612,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"request\": MockGPURequest(\"prod_service\", \"inference_cluster\", \"A100\", 6, 40, 24.0, 8),"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/test_gradual_integration.py": {
          "dummy_implementations": [
            {
              "line": 124,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock liquid config conversion.\"\"\""
            },
            {
              "line": 125,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockLiquidConfig:"
            },
            {
              "line": 131,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return MockLiquidConfig()"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/core_agent.py": {
          "dummy_implementations": [
            {
              "line": 16,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockJaeger:"
            },
            {
              "line": 17,
              "pattern": "pass\\s*$",
              "code": "def __init__(self, *args, **kwargs): pass"
            },
            {
              "line": 19,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "jaeger = type('jaeger', (), {'JaegerExporter': MockJaeger})"
            },
            {
              "line": 25,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockTrace:"
            },
            {
              "line": 28,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "trace = MockTrace()"
            },
            {
              "line": 17,
              "pattern": "empty function",
              "code": "def __init__(...): pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/test_knowledge_integration.py": {
          "dummy_implementations": [
            {
              "line": 23,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "print(\"   Running with mock classes only\")"
            },
            {
              "line": 27,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockNeo4jAdapter:"
            },
            {
              "line": 28,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock Neo4j adapter for testing without actual database.\"\"\""
            },
            {
              "line": 35,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock initialization.\"\"\""
            },
            {
              "line": 39,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock query execution.\"\"\""
            },
            {
              "line": 42,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Return mock data based on query patterns"
            },
            {
              "line": 54,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 57,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock write operation.\"\"\""
            },
            {
              "line": 61,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock close.\"\"\""
            },
            {
              "line": 62,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 81,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Test with mock adapter"
            },
            {
              "line": 82,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mock_adapter = MockNeo4jAdapter()"
            },
            {
              "line": 83,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "await mock_adapter.initialize()"
            },
            {
              "line": 84,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "kg_provider.set_neo4j_adapter(mock_adapter)"
            },
            {
              "line": 104,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mock_adapter = MockNeo4jAdapter()"
            },
            {
              "line": 105,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "await mock_adapter.initialize()"
            },
            {
              "line": 106,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "kg_provider.set_neo4j_adapter(mock_adapter)"
            },
            {
              "line": 133,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "print(\"   Context is None (expected for mock)\")"
            },
            {
              "line": 135,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "print(f\"   Neo4j queries executed: {mock_adapter.query_count}\")"
            },
            {
              "line": 151,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mock_adapter = MockNeo4jAdapter()"
            },
            {
              "line": 152,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "await mock_adapter.initialize()"
            },
            {
              "line": 153,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "kg_provider.set_neo4j_adapter(mock_adapter)"
            },
            {
              "line": 172,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "print(f\"   Neo4j queries: {mock_adapter.query_count}\")"
            },
            {
              "line": 188,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mock_adapter = MockNeo4jAdapter()"
            },
            {
              "line": 189,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "await mock_adapter.initialize()"
            },
            {
              "line": 190,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "kg_provider.set_neo4j_adapter(mock_adapter)"
            },
            {
              "line": 224,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mock_adapter = MockNeo4jAdapter()"
            },
            {
              "line": 225,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "await mock_adapter.initialize()"
            },
            {
              "line": 226,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "kg_provider.set_neo4j_adapter(mock_adapter)"
            },
            {
              "line": 260,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mock_adapter = MockNeo4jAdapter()"
            },
            {
              "line": 261,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "await mock_adapter.initialize()"
            },
            {
              "line": 262,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "kg_provider.set_neo4j_adapter(mock_adapter)"
            },
            {
              "line": 306,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mock_adapter = MockNeo4jAdapter()"
            },
            {
              "line": 307,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "await mock_adapter.initialize()"
            },
            {
              "line": 308,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "kg_provider.set_neo4j_adapter(mock_adapter)"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [
            "dangerous eval/exec"
          ],
          "security_issues": []
        },
        "agents/council/neural_engine.py": {
          "dummy_implementations": [
            {
              "line": 141,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Create a dummy state for health check"
            },
            {
              "line": 142,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "type('DummyState', (), {'context_cache': {}})()"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/test_confidence_scoring_simple.py": {
          "dummy_implementations": [
            {
              "line": 16,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock models for testing (simplified versions)"
            },
            {
              "line": 18,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockGPUAllocationRequest:"
            },
            {
              "line": 35,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockLNNCouncilState:"
            },
            {
              "line": 36,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "current_request: Optional[MockGPUAllocationRequest] = None"
            },
            {
              "line": 185,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "request = MockGPUAllocationRequest("
            },
            {
              "line": 196,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "state = MockLNNCouncilState(current_request=request)"
            },
            {
              "line": 213,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "large_request = MockGPUAllocationRequest("
            },
            {
              "line": 252,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "request = MockGPUAllocationRequest("
            },
            {
              "line": 272,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "state = MockLNNCouncilState(current_request=request)"
            },
            {
              "line": 320,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "request = MockGPUAllocationRequest("
            },
            {
              "line": 331,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "state = MockLNNCouncilState(current_request=request)"
            },
            {
              "line": 396,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "request = MockGPUAllocationRequest("
            },
            {
              "line": 408,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "state = MockLNNCouncilState(current_request=request)"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/test_observability_comprehensive.py": {
          "dummy_implementations": [],
          "missing_features": [],
          "outdated_patterns": [
            "blocking sleep instead of async"
          ],
          "security_issues": []
        },
        "agents/council/test_models_comprehensive.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/test_pipeline_integration.py": {
          "dummy_implementations": [
            {
              "line": 14,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockLNNCouncilConfig:"
            },
            {
              "line": 35,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockGPURequest:"
            },
            {
              "line": 48,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockLNNCouncilState:"
            },
            {
              "line": 50,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "self.current_request = request or MockGPURequest()"
            },
            {
              "line": 64,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockGPUAllocationDecision:"
            },
            {
              "line": 77,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock the LNN core for testing"
            },
            {
              "line": 78,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockLiquidNeuralNetwork:"
            },
            {
              "line": 85,
              "pattern": "pass\\s*$",
              "code": "# Simple mock forward pass"
            },
            {
              "line": 85,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Simple mock forward pass"
            },
            {
              "line": 136,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "state = MockLNNCouncilState(request)"
            },
            {
              "line": 185,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 206,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 211,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "request = MockGPURequest("
            },
            {
              "line": 239,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 253,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "request = MockGPURequest("
            },
            {
              "line": 284,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 289,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "request = MockGPURequest("
            },
            {
              "line": 320,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 327,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "MockGPURequest("
            },
            {
              "line": 374,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 381,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "request = MockGPURequest("
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/test_memory_simple.py": {
          "dummy_implementations": [
            {
              "line": 60,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock recent decisions"
            },
            {
              "line": 82,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock similar requests"
            },
            {
              "line": 105,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock learning data"
            }
          ],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/test_fallback_comprehensive.py": {
          "dummy_implementations": [
            {
              "line": 15,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockGPURequest:"
            },
            {
              "line": 16,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock GPU request for testing\"\"\""
            },
            {
              "line": 25,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockLNNCouncilState:"
            },
            {
              "line": 26,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock state for testing\"\"\""
            },
            {
              "line": 27,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "current_request: Optional[MockGPURequest] = None"
            },
            {
              "line": 38,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockLNNCouncilConfig:"
            },
            {
              "line": 39,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock config for testing\"\"\""
            },
            {
              "line": 60,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "self.config = MockLNNCouncilConfig()"
            },
            {
              "line": 116,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "state = MockLNNCouncilState("
            },
            {
              "line": 117,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "current_request=MockGPURequest(priority=9)"
            },
            {
              "line": 151,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "state = MockLNNCouncilState("
            },
            {
              "line": 152,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "current_request=MockGPURequest("
            },
            {
              "line": 195,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "state = MockLNNCouncilState("
            },
            {
              "line": 196,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "current_request=MockGPURequest(priority=6)"
            },
            {
              "line": 219,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "state = MockLNNCouncilState("
            },
            {
              "line": 220,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "current_request=MockGPURequest(priority=7)"
            },
            {
              "line": 325,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "state = MockLNNCouncilState("
            },
            {
              "line": 326,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "current_request=MockGPURequest(priority=6)"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/test_real_integration.py": {
          "dummy_implementations": [
            {
              "line": 3,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "REAL Integration Test - No Mocks, Real Components"
            },
            {
              "line": 75,
              "pattern": "pass\\s*$",
              "code": "# Run REAL forward pass"
            },
            {
              "line": 405,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Test REAL component integration without mocks.\"\"\""
            },
            {
              "line": 476,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "print(\"\ud83d\ude80 REAL Integration Tests - No Mocks, Real Components\\n\")"
            },
            {
              "line": 514,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "print(\"   \u2022 Component integration without mocks \u2705\")"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/confidence_scoring.py": {
          "dummy_implementations": [
            {
              "line": 248,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# For now, return a placeholder based on history length"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/test_final_working.py": {
          "dummy_implementations": [
            {
              "line": 6,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "without mocks, without complex dependencies, just real functionality."
            },
            {
              "line": 551,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "print(\"   \u2022 No mocks - all real working code\")"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/test_kg_final.py": {
          "dummy_implementations": [
            {
              "line": 18,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockLNNCouncilConfig:"
            },
            {
              "line": 32,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockGPURequest:"
            },
            {
              "line": 45,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockLNNCouncilState:"
            },
            {
              "line": 47,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "self.current_request = MockGPURequest()"
            },
            {
              "line": 51,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockNeo4jAdapter:"
            },
            {
              "line": 52,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Enhanced mock Neo4j adapter with TDA-aware responses.\"\"\""
            },
            {
              "line": 58,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock graph topology data for TDA features"
            },
            {
              "line": 74,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Enhanced mock with TDA-aware responses.\"\"\""
            },
            {
              "line": 154,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 170,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def __init__(self, config: MockLNNCouncilConfig):"
            },
            {
              "line": 192,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "async def get_knowledge_context(self, state: MockLNNCouncilState) -> torch.Tensor:"
            },
            {
              "line": 447,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 451,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "neo4j_adapter = MockNeo4jAdapter()"
            },
            {
              "line": 456,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "state = MockLNNCouncilState()"
            },
            {
              "line": 479,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 483,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "neo4j_adapter = MockNeo4jAdapter()"
            },
            {
              "line": 498,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 501,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "neo4j_adapter = MockNeo4jAdapter()"
            },
            {
              "line": 505,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "request = MockGPURequest()"
            },
            {
              "line": 524,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 527,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "neo4j_adapter = MockNeo4jAdapter()"
            },
            {
              "line": 531,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "request = MockGPURequest()"
            },
            {
              "line": 556,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 559,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "neo4j_adapter = MockNeo4jAdapter()"
            },
            {
              "line": 563,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "request = MockGPURequest()"
            },
            {
              "line": 579,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 582,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "neo4j_adapter = MockNeo4jAdapter()"
            },
            {
              "line": 587,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "states = [MockLNNCouncilState() for _ in range(3)]"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/test_basic_components.py": {
          "dummy_implementations": [
            {
              "line": 6,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "No mocks, no fancy stuff - just test the real code we have."
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/test_confidence_scoring.py": {
          "dummy_implementations": [
            {
              "line": 13,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "from unittest.mock import Mock, patch"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/lnn_council.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/test_models_simple.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/test_decision_pipeline.py": {
          "dummy_implementations": [
            {
              "line": 19,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockLNNCouncilConfig:"
            },
            {
              "line": 33,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock liquid config conversion.\"\"\""
            },
            {
              "line": 41,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockGPURequest:"
            },
            {
              "line": 54,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockLNNCouncilState:"
            },
            {
              "line": 56,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "self.current_request = request or MockGPURequest()"
            },
            {
              "line": 70,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockGPUAllocationDecision:"
            },
            {
              "line": 83,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockContextAwareLNN:"
            },
            {
              "line": 84,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock Context-Aware LNN for testing.\"\"\""
            },
            {
              "line": 91,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock forward pass with context.\"\"\""
            },
            {
              "line": 123,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockMemoryProvider:"
            },
            {
              "line": 124,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock Memory Context Provider.\"\"\""
            },
            {
              "line": 131,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock memory context retrieval.\"\"\""
            },
            {
              "line": 153,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockKnowledgeProvider:"
            },
            {
              "line": 154,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock Knowledge Graph Context Provider.\"\"\""
            },
            {
              "line": 161,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock knowledge graph context retrieval.\"\"\""
            },
            {
              "line": 181,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockContextEncoder:"
            },
            {
              "line": 182,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock Context Encoder.\"\"\""
            },
            {
              "line": 188,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Import the actual pipeline (with mocked dependencies)"
            },
            {
              "line": 193,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock the imports to use our test classes"
            },
            {
              "line": 194,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockDecisionPipeline:"
            },
            {
              "line": 195,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock Decision Pipeline that uses our test components.\"\"\""
            },
            {
              "line": 202,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock components"
            },
            {
              "line": 209,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Initialize mock components.\"\"\""
            },
            {
              "line": 213,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "self._context_lnn = MockContextAwareLNN(self.config)"
            },
            {
              "line": 214,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "self._memory_provider = MockMemoryProvider(self.config)"
            },
            {
              "line": 215,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "self._knowledge_provider = MockKnowledgeProvider(self.config)"
            },
            {
              "line": 216,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "self._context_encoder = MockContextEncoder(self.config)"
            },
            {
              "line": 221,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Process decision through mock pipeline.\"\"\""
            },
            {
              "line": 228,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "state = MockLNNCouncilState(request)"
            },
            {
              "line": 262,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock request analysis.\"\"\""
            },
            {
              "line": 273,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock context gathering.\"\"\""
            },
            {
              "line": 278,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "context_quality = 0.8  # Mock quality score"
            },
            {
              "line": 295,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock neural inference.\"\"\""
            },
            {
              "line": 316,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock decision validation.\"\"\""
            },
            {
              "line": 325,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "final_decision = MockGPUAllocationDecision("
            },
            {
              "line": 366,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 367,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "pipeline = MockDecisionPipeline(config)"
            },
            {
              "line": 383,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 384,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "pipeline = MockDecisionPipeline(config)"
            },
            {
              "line": 387,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "request = MockGPURequest("
            },
            {
              "line": 416,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 417,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "pipeline = MockDecisionPipeline(config)"
            },
            {
              "line": 422,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "MockGPURequest(gpu_count=1, compute_hours=2, priority=9),  # Simple"
            },
            {
              "line": 423,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "MockGPURequest(gpu_count=8, compute_hours=48, priority=3),  # Complex"
            },
            {
              "line": 424,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "MockGPURequest(gpu_count=4, compute_hours=12, priority=6),  # Medium"
            },
            {
              "line": 429,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "state = MockLNNCouncilState(request)"
            },
            {
              "line": 446,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 447,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "pipeline = MockDecisionPipeline(config)"
            },
            {
              "line": 450,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "request = MockGPURequest()"
            },
            {
              "line": 451,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "state = MockLNNCouncilState(request)"
            },
            {
              "line": 478,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 479,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "pipeline = MockDecisionPipeline(config)"
            },
            {
              "line": 491,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "request = MockGPURequest(priority=case[\"priority\"])"
            },
            {
              "line": 492,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "state = MockLNNCouncilState(request)"
            },
            {
              "line": 516,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 517,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "pipeline = MockDecisionPipeline(config)"
            },
            {
              "line": 529,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "request = MockGPURequest()"
            },
            {
              "line": 530,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "state = MockLNNCouncilState(request)"
            },
            {
              "line": 559,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 560,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "pipeline = MockDecisionPipeline(config)"
            },
            {
              "line": 564,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "MockGPURequest(request_id=f\"perf_test_{i}\", priority=5+i%5)"
            },
            {
              "line": 587,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 588,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "pipeline = MockDecisionPipeline(config)"
            },
            {
              "line": 592,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "invalid_request = MockGPURequest()"
            },
            {
              "line": 612,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 613,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "pipeline = MockDecisionPipeline(config)"
            },
            {
              "line": 634,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config = MockLNNCouncilConfig()"
            },
            {
              "line": 635,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "pipeline = MockDecisionPipeline(config)"
            },
            {
              "line": 638,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "request = MockGPURequest("
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/test_knowledge_graph.py": {
          "dummy_implementations": [
            {
              "line": 11,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockLNNCouncilConfig:"
            },
            {
              "line": 18,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockGPURequest:"
            },
            {
              "line": 31,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockLNNCouncilState:"
            },
            {
              "line": 33,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "self.current_request = MockGPURequest()"
            },
            {
              "line": 46,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock caches"
            },
            {
              "line": 180,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "state = MockLNNCouncilState()"
            },
            {
              "line": 200,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "request = MockGPURequest()"
            },
            {
              "line": 218,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "request = MockGPURequest()"
            },
            {
              "line": 236,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "request = MockGPURequest()"
            },
            {
              "line": 254,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "request = MockGPURequest()"
            },
            {
              "line": 273,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "request = MockGPURequest()"
            },
            {
              "line": 294,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "states = [MockLNNCouncilState() for _ in range(3)]"
            },
            {
              "line": 332,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "states = [MockLNNCouncilState() for _ in range(10)]"
            },
            {
              "line": 365,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock entity embedder"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [
            "dangerous eval/exec"
          ],
          "security_issues": []
        },
        "agents/council/test_fallback_standalone.py": {
          "dummy_implementations": [
            {
              "line": 45,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockGPURequest:"
            },
            {
              "line": 46,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock GPU request for testing\"\"\""
            },
            {
              "line": 56,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockLNNCouncilState:"
            },
            {
              "line": 57,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock state for testing\"\"\""
            },
            {
              "line": 58,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "current_request: Optional[MockGPURequest] = None"
            },
            {
              "line": 66,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockLNNCouncilConfig:"
            },
            {
              "line": 67,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock config for testing\"\"\""
            },
            {
              "line": 84,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def __init__(self, config: MockLNNCouncilConfig):"
            },
            {
              "line": 129,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def _emergency_mode_decision(self, state: MockLNNCouncilState) -> Dict[str, Any]:"
            },
            {
              "line": 155,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def _rule_based_decision(self, state: MockLNNCouncilState) -> Dict[str, Any]:"
            },
            {
              "line": 227,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "async def _reduced_ai_decision(self, state: MockLNNCouncilState, trigger: FallbackTrigger) -> Dict[str, Any]:"
            },
            {
              "line": 253,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 263,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 273,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def _minimal_fallback_decision(self, state: MockLNNCouncilState) -> Dict[str, Any]:"
            },
            {
              "line": 329,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "state: MockLNNCouncilState,"
            },
            {
              "line": 332,
              "pattern": "dummy|mock|fake|placeholder",
              "code": ") -> MockLNNCouncilState:"
            },
            {
              "line": 364,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "async def handle_failure(self, state: MockLNNCouncilState, failed_step: str, error: Exception) -> MockLNNCouncilState:"
            },
            {
              "line": 454,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "self.config = MockLNNCouncilConfig()"
            },
            {
              "line": 500,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "state = MockLNNCouncilState("
            },
            {
              "line": 501,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "current_request=MockGPURequest(priority=9)"
            },
            {
              "line": 532,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "state = MockLNNCouncilState("
            },
            {
              "line": 533,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "current_request=MockGPURequest("
            },
            {
              "line": 573,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "state = MockLNNCouncilState("
            },
            {
              "line": 574,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "current_request=MockGPURequest(priority=6)"
            },
            {
              "line": 594,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "state = MockLNNCouncilState("
            },
            {
              "line": 595,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "current_request=MockGPURequest(priority=7)"
            },
            {
              "line": 694,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "state = MockLNNCouncilState("
            },
            {
              "line": 695,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "current_request=MockGPURequest(priority=6)"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/memory_learning.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/knowledge_context.py": {
          "dummy_implementations": [
            {
              "line": 138,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return self._get_mock_entity_context(request)"
            },
            {
              "line": 221,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return self._get_mock_relationship_context(request)"
            },
            {
              "line": 284,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return self._get_mock_multihop_context(request)"
            },
            {
              "line": 353,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return self._get_mock_temporal_knowledge_context(request)"
            },
            {
              "line": 424,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return self._get_mock_topology_context(request)"
            },
            {
              "line": 476,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"graph_connectivity\": 0.7,  # Placeholder"
            },
            {
              "line": 494,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return self._get_mock_user_entity(user_id)"
            },
            {
              "line": 536,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return self._get_mock_project_entity(project_id)"
            },
            {
              "line": 578,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return self._get_mock_resource_context(request)"
            },
            {
              "line": 628,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return self._get_mock_org_context(request)"
            },
            {
              "line": 733,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock methods for testing without Neo4j"
            },
            {
              "line": 734,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def _get_mock_user_entity(self, user_id: str) -> Dict[str, Any]:"
            },
            {
              "line": 735,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock user entity for testing.\"\"\""
            },
            {
              "line": 744,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def _get_mock_project_entity(self, project_id: str) -> Dict[str, Any]:"
            },
            {
              "line": 745,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock project entity for testing.\"\"\""
            },
            {
              "line": 754,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def _get_mock_resource_context(self, request) -> Dict[str, Any]:"
            },
            {
              "line": 755,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock resource context for testing.\"\"\""
            },
            {
              "line": 764,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def _get_mock_org_context(self, request) -> Dict[str, Any]:"
            },
            {
              "line": 765,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock organizational context for testing.\"\"\""
            },
            {
              "line": 947,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"user_betweenness\": 0.1,  # Placeholder"
            },
            {
              "line": 948,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"community_membership\": 0.2,  # Placeholder"
            },
            {
              "line": 949,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"clustering_coefficient\": 0.1,  # Placeholder"
            },
            {
              "line": 1081,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock methods for testing without Neo4j"
            },
            {
              "line": 1082,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def _get_mock_entity_context(self, request) -> Dict[str, Any]:"
            },
            {
              "line": 1083,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock entity context for testing.\"\"\""
            },
            {
              "line": 1097,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def _get_mock_relationship_context(self, request) -> Dict[str, Any]:"
            },
            {
              "line": 1098,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock relationship context for testing.\"\"\""
            },
            {
              "line": 1108,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def _get_mock_multihop_context(self, request) -> Dict[str, Any]:"
            },
            {
              "line": 1109,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock multi-hop context for testing.\"\"\""
            },
            {
              "line": 1120,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def _get_mock_temporal_knowledge_context(self, request) -> Dict[str, Any]:"
            },
            {
              "line": 1121,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock temporal knowledge context for testing.\"\"\""
            },
            {
              "line": 1131,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def _get_mock_topology_context(self, request) -> Dict[str, Any]:"
            },
            {
              "line": 1132,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock topology context for testing.\"\"\""
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/test_lnn_council_agent.py": {
          "dummy_implementations": [
            {
              "line": 7,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "- Mock integration points"
            },
            {
              "line": 16,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "from unittest.mock import Mock, patch, AsyncMock"
            },
            {
              "line": 419,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock the LNN engine to avoid actual neural network computation"
            },
            {
              "line": 420,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "with patch.object(agent, '_initialize_lnn_engine') as mock_init:"
            },
            {
              "line": 421,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mock_lnn = Mock()"
            },
            {
              "line": 422,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mock_lnn.return_value = torch.tensor([[0.1, 0.8, 0.3]])  # Mock output"
            },
            {
              "line": 423,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mock_init.return_value = mock_lnn"
            },
            {
              "line": 449,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock a step to raise an exception"
            }
          ],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/memory_context.py": {
          "dummy_implementations": [
            {
              "line": 118,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return self._get_mock_episodic_context(request)"
            },
            {
              "line": 171,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return self._get_mock_semantic_context(request)"
            },
            {
              "line": 227,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return self._get_mock_meta_context(request)"
            },
            {
              "line": 276,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return self._get_mock_temporal_context(request)"
            },
            {
              "line": 327,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return self._get_mock_user_context(user_id)"
            },
            {
              "line": 359,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return self._get_mock_project_context(project_id)"
            },
            {
              "line": 391,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return self._get_mock_similar_context(request)"
            },
            {
              "line": 472,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock methods for testing without Mem0"
            },
            {
              "line": 473,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def _get_mock_user_context(self, user_id: str) -> Dict[str, Any]:"
            },
            {
              "line": 474,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock user context for testing.\"\"\""
            },
            {
              "line": 482,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def _get_mock_project_context(self, project_id: str) -> Dict[str, Any]:"
            },
            {
              "line": 483,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock project context for testing.\"\"\""
            },
            {
              "line": 491,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def _get_mock_similar_context(self, request) -> Dict[str, Any]:"
            },
            {
              "line": 492,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock similar requests context for testing.\"\"\""
            },
            {
              "line": 517,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "logger.info(\"Mock: Storing decision outcome\","
            },
            {
              "line": 810,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock methods for testing without Mem0"
            },
            {
              "line": 811,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def _get_mock_episodic_context(self, request) -> Dict[str, Any]:"
            },
            {
              "line": 812,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock episodic context for testing.\"\"\""
            },
            {
              "line": 821,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def _get_mock_semantic_context(self, request) -> Dict[str, Any]:"
            },
            {
              "line": 822,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock semantic context for testing.\"\"\""
            },
            {
              "line": 830,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def _get_mock_meta_context(self, request) -> Dict[str, Any]:"
            },
            {
              "line": 831,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock meta-learning context for testing.\"\"\""
            },
            {
              "line": 839,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def _get_mock_temporal_context(self, request) -> Dict[str, Any]:"
            },
            {
              "line": 840,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock temporal context for testing.\"\"\""
            }
          ],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/executor/agent.py": {
          "dummy_implementations": [
            {
              "line": 27,
              "pattern": "pass\\s*$",
              "code": "def __init__(self): pass"
            },
            {
              "line": 29,
              "pattern": "pass\\s*$",
              "code": "def __init__(self, **kwargs): pass"
            },
            {
              "line": 31,
              "pattern": "pass\\s*$",
              "code": "def __init__(self): pass"
            },
            {
              "line": 27,
              "pattern": "empty function",
              "code": "def __init__(...): pass"
            },
            {
              "line": 29,
              "pattern": "empty function",
              "code": "def __init__(...): pass"
            },
            {
              "line": 31,
              "pattern": "empty function",
              "code": "def __init__(...): pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/memory/unified.py": {
          "dummy_implementations": [
            {
              "line": 60,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 62,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 64,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 495,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/real_agents/researcher_agent.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/observer/agent.py": {
          "dummy_implementations": [
            {
              "line": 222,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Cryptographic signature (placeholder - will be signed)"
            },
            {
              "line": 223,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "signature=\"placeholder\","
            },
            {
              "line": 267,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "state_signature=\"placeholder\",  # Will be signed"
            },
            {
              "line": 393,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "signature=\"placeholder\","
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/schemas/state.py": {
          "dummy_implementations": [
            {
              "line": 281,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "new_state_data['state_signature'] = 'placeholder'"
            },
            {
              "line": 321,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "new_state_data['state_signature'] = 'placeholder'"
            },
            {
              "line": 359,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "new_state_data['state_signature'] = 'placeholder'"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/schemas/log.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "observability",
              "expected": [
                "opentelemetry",
                "prometheus",
                "jaeger"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/schemas/base.py": {
          "dummy_implementations": [
            {
              "line": 573,
              "pattern": "return\\s*{\\s*}",
              "code": "return {}"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/schemas/crypto.py": {
          "dummy_implementations": [
            {
              "line": 350,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# POST-QUANTUM PLACEHOLDER PROVIDERS"
            },
            {
              "line": 354,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Placeholder for post-quantum cryptographic providers.\"\"\""
            },
            {
              "line": 362,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Placeholder for post-quantum signing.\"\"\""
            },
            {
              "line": 369,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Placeholder for post-quantum verification.\"\"\""
            },
            {
              "line": 376,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Placeholder for post-quantum key generation.\"\"\""
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/factories/builders.py": {
          "dummy_implementations": [
            {
              "line": 171,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "self._data['content_signature'] = 'placeholder'"
            },
            {
              "line": 276,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "self._data['action_signature'] = 'placeholder'"
            },
            {
              "line": 376,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "self._data['state_signature'] = 'placeholder'"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/factories/agent_factory.py": {
          "dummy_implementations": [
            {
              "line": 63,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 150,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Create supervisor with mock LLM if not provided"
            },
            {
              "line": 152,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Create a simple mock LLM for testing"
            },
            {
              "line": 153,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockLLM:"
            },
            {
              "line": 158,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "config[\"llm\"] = MockLLM()"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/factories/unified_factory.py": {
          "dummy_implementations": [
            {
              "line": 190,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 207,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/workflows/simple_chain.py": {
          "dummy_implementations": [
            {
              "line": 41,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "This is a mock implementation - in production, this would"
            },
            {
              "line": 85,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock research results"
            },
            {
              "line": 122,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Record tokens (mock)"
            },
            {
              "line": 223,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Extract key insights (mock)"
            },
            {
              "line": 269,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Generate recommendations (mock)"
            },
            {
              "line": 363,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/temporal/gpu_allocation_activities.py": {
          "dummy_implementations": [
            {
              "line": 64,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock availability check - in real implementation would query resource manager"
            },
            {
              "line": 230,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Return fallback mock votes for now"
            },
            {
              "line": 231,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mock_votes = ["
            },
            {
              "line": 253,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"votes\": mock_votes,"
            },
            {
              "line": 254,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"vote_count\": len(mock_votes),"
            },
            {
              "line": 287,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Generate mock GPU IDs"
            },
            {
              "line": 433,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock GPU allocation - in real implementation would call resource manager"
            },
            {
              "line": 467,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock GPU deallocation"
            }
          ],
          "missing_features": [
            {
              "category": "gpu_accel",
              "expected": [
                "cuda",
                "triton",
                "tensorrt",
                "onnx"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/temporal/workflows.py": {
          "dummy_implementations": [
            {
              "line": 473,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# This is a placeholder for the full PBFT implementation"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/base_classes/instrumentation.py": {
          "dummy_implementations": [
            {
              "line": 503,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 526,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 530,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/base_classes/agent.py": {
          "dummy_implementations": [
            {
              "line": 437,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 442,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 455,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 536,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 541,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/communication/transport.py": {
          "dummy_implementations": [
            {
              "line": 253,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 343,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/communication/protocol.py": {
          "dummy_implementations": [
            {
              "line": 449,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# For now, return a placeholder"
            },
            {
              "line": 451,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return ACPResponse(success=True, result={\"placeholder\": \"response\"})"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/evolver/agent.py": {
          "dummy_implementations": [
            {
              "line": 31,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def __init__(self, agent_id: str = \"evolver-1\", ai_provider: str = \"mock\"):"
            },
            {
              "line": 136,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Generate a patch using AI (mocked for now).\"\"\""
            },
            {
              "line": 138,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "if self.ai_provider == \"mock\":"
            },
            {
              "line": 139,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock AI response based on analysis"
            },
            {
              "line": 140,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return self._generate_mock_patch(failure, analysis)"
            },
            {
              "line": 143,
              "pattern": "raise\\s+NotImplementedError",
              "code": "raise NotImplementedError(f\"AI provider {self.ai_provider} not implemented\")"
            },
            {
              "line": 145,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def _generate_mock_patch("
            },
            {
              "line": 150,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Generate a mock patch for testing.\"\"\""
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/resilience/fallback_agent.py": {
          "dummy_implementations": [
            {
              "line": 261,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/resilience/bulkhead.py": {
          "dummy_implementations": [
            {
              "line": 283,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/resilience/retry_policy.py": {
          "dummy_implementations": [
            {
              "line": 59,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 246,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/v2/executor.py": {
          "dummy_implementations": [
            {
              "line": 24,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 28,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/v2/observer.py": {
          "dummy_implementations": [
            {
              "line": 297,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Compare with historical data (mock)"
            },
            {
              "line": 373,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"observation_duration_ms\": 1250  # Mock"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/v2/search.py": {
          "dummy_implementations": [
            {
              "line": 26,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 30,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/v2/coordinator.py": {
          "dummy_implementations": [
            {
              "line": 25,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 29,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/v2/analyst.py": {
          "dummy_implementations": [
            {
              "line": 25,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 29,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/analyst/agent.py": {
          "dummy_implementations": [
            {
              "line": 27,
              "pattern": "pass\\s*$",
              "code": "def __init__(self): pass"
            },
            {
              "line": 29,
              "pattern": "pass\\s*$",
              "code": "def __init__(self, **kwargs): pass"
            },
            {
              "line": 31,
              "pattern": "pass\\s*$",
              "code": "def __init__(self): pass"
            },
            {
              "line": 27,
              "pattern": "empty function",
              "code": "def __init__(...): pass"
            },
            {
              "line": 29,
              "pattern": "empty function",
              "code": "def __init__(...): pass"
            },
            {
              "line": 31,
              "pattern": "empty function",
              "code": "def __init__(...): pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/observer/tests/test_agent.py": {
          "dummy_implementations": [
            {
              "line": 14,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "from unittest.mock import Mock, patch"
            },
            {
              "line": 118,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "assert evidence.signature != \"placeholder\""
            },
            {
              "line": 135,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "assert result_state.state_signature != \"placeholder\""
            },
            {
              "line": 151,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "assert decision.signature != \"placeholder\""
            },
            {
              "line": 203,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock the evidence creation to fail twice, then succeed"
            },
            {
              "line": 270,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "with patch('opentelemetry.trace.get_tracer') as mock_tracer:"
            },
            {
              "line": 271,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mock_span = Mock()"
            },
            {
              "line": 272,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mock_span.get_span_context.return_value.trace_id = \"test_trace_id\""
            },
            {
              "line": 273,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mock_tracer.return_value.start_as_current_span.return_value.__enter__.return_value = mock_span"
            },
            {
              "line": 280,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mock_tracer.assert_called()"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/lnn/agent.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/lnn/orchestrator.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/lnn/interfaces.py": {
          "dummy_implementations": [
            {
              "line": 32,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 37,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 42,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 47,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 56,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 61,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 66,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 71,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 76,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 89,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 99,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 108,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 117,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 130,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 135,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 140,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 154,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 159,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 164,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 179,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 187,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 203,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 211,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 224,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 232,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 241,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 254,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 263,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 271,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 285,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 294,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 303,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 312,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 317,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 322,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 327,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/lnn/implementations.py": {
          "dummy_implementations": [
            {
              "line": 91,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 111,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 120,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 143,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 199,
              "pattern": "return\\s*{\\s*}",
              "code": "return {}"
            },
            {
              "line": 727,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []  # Placeholder"
            },
            {
              "line": 727,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return []  # Placeholder"
            },
            {
              "line": 731,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            }
          ],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/lnn/factory.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/lnn/contracts.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/lnn/registry.py": {
          "dummy_implementations": [
            {
              "line": 43,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 62,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 91,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            }
          ],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/lnn/__init__.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/lnn/context/__init__.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/lnn/neural/config.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "agents/council/lnn/neural/__init__.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "api": {
      "total_files": 11,
      "dummy_files": 4,
      "needs_update": 6,
      "missing_init": true,
      "missing_tests": true,
      "files": {
        "api/neural_mesh_dashboard.py": {
          "dummy_implementations": [
            {
              "line": 216,
              "pattern": "return\\s*{\\s*}",
              "code": "return {}"
            },
            {
              "line": 236,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 334,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Placeholder - would analyze historical data"
            }
          ],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "api/search.py": {
          "dummy_implementations": [
            {
              "line": 355,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock implementation - would use real HotMemorySearch"
            },
            {
              "line": 376,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock implementation - would use real SemanticMemorySearch"
            }
          ],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "api/neural_brain_api.py": {
          "dummy_implementations": [
            {
              "line": 154,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# For now, just a placeholder"
            }
          ],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "api/governance_dashboard.py": {
          "dummy_implementations": [
            {
              "line": 166,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# For now, return mock data structure"
            },
            {
              "line": 197,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# For now, return mock trend data"
            },
            {
              "line": 204,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock trending accuracy (improving over time)"
            },
            {
              "line": 258,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"estimated_records\": 450,  # Mock estimate"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "api/streaming.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "streaming",
              "expected": [
                "kafka",
                "pulsar",
                "nats",
                "redpanda"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "api/streaming_pro.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "streaming",
              "expected": [
                "kafka",
                "pulsar",
                "nats",
                "redpanda"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "api/routes_memory.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "benchmarks": {
      "total_files": 1,
      "dummy_files": 0,
      "needs_update": 0,
      "missing_init": true,
      "missing_tests": true,
      "files": {}
    },
    "bio_homeostatic": {
      "total_files": 4,
      "dummy_files": 0,
      "needs_update": 0,
      "missing_init": false,
      "missing_tests": true,
      "files": {}
    },
    "chaos": {
      "total_files": 1,
      "dummy_files": 1,
      "needs_update": 0,
      "missing_init": true,
      "missing_tests": true,
      "files": {
        "chaos/experiments.py": {
          "dummy_implementations": [
            {
              "line": 42,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 47,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 52,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 57,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 380,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "collective": {
      "total_files": 6,
      "dummy_files": 4,
      "needs_update": 1,
      "missing_init": false,
      "missing_tests": true,
      "files": {
        "collective/context_engine.py": {
          "dummy_implementations": [
            {
              "line": 26,
              "pattern": "pass\\s*$",
              "code": "def __init__(self): pass"
            },
            {
              "line": 28,
              "pattern": "pass\\s*$",
              "code": "def __init__(self, **kwargs): pass"
            },
            {
              "line": 30,
              "pattern": "pass\\s*$",
              "code": "def __init__(self): pass"
            },
            {
              "line": 26,
              "pattern": "empty function",
              "code": "def __init__(...): pass"
            },
            {
              "line": 28,
              "pattern": "empty function",
              "code": "def __init__(...): pass"
            },
            {
              "line": 30,
              "pattern": "empty function",
              "code": "def __init__(...): pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "collective/memory_manager.py": {
          "dummy_implementations": [
            {
              "line": 46,
              "pattern": "pass\\s*$",
              "code": "def __init__(self): pass"
            }
          ],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "collective/graph_builder.py": {
          "dummy_implementations": [
            {
              "line": 22,
              "pattern": "pass\\s*$",
              "code": "def __init__(self, state_class): pass"
            },
            {
              "line": 23,
              "pattern": "pass\\s*$",
              "code": "def add_node(self, name, func): pass"
            },
            {
              "line": 24,
              "pattern": "pass\\s*$",
              "code": "def add_edge(self, from_node, to_node): pass"
            },
            {
              "line": 25,
              "pattern": "pass\\s*$",
              "code": "def add_conditional_edges(self, from_node, condition, mapping): pass"
            },
            {
              "line": 26,
              "pattern": "pass\\s*$",
              "code": "def set_entry_point(self, node): pass"
            },
            {
              "line": 46,
              "pattern": "pass\\s*$",
              "code": "def __init__(self): pass"
            },
            {
              "line": 22,
              "pattern": "empty function",
              "code": "def __init__(...): pass"
            },
            {
              "line": 23,
              "pattern": "empty function",
              "code": "def add_node(...): pass"
            },
            {
              "line": 24,
              "pattern": "empty function",
              "code": "def add_edge(...): pass"
            },
            {
              "line": 25,
              "pattern": "empty function",
              "code": "def add_conditional_edges(...): pass"
            },
            {
              "line": 26,
              "pattern": "empty function",
              "code": "def set_entry_point(...): pass"
            },
            {
              "line": 46,
              "pattern": "empty function",
              "code": "def __init__(...): pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "collective/supervisor.py": {
          "dummy_implementations": [
            {
              "line": 25,
              "pattern": "pass\\s*$",
              "code": "def __init__(self): pass"
            },
            {
              "line": 235,
              "pattern": "return\\s*{\\s*}",
              "code": "return {}"
            },
            {
              "line": 237,
              "pattern": "return\\s*{\\s*}",
              "code": "return {}"
            },
            {
              "line": 25,
              "pattern": "empty function",
              "code": "def __init__(...): pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "communication": {
      "total_files": 8,
      "dummy_files": 6,
      "needs_update": 1,
      "missing_init": true,
      "missing_tests": true,
      "files": {
        "communication/neural_mesh.py": {
          "dummy_implementations": [
            {
              "line": 389,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 422,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 560,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Placeholder for consensus implementation"
            },
            {
              "line": 561,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "communication/nats_a2a.py": {
          "dummy_implementations": [
            {
              "line": 476,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# For now, return a placeholder"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "communication/collective/context_engine.py": {
          "dummy_implementations": [
            {
              "line": 26,
              "pattern": "pass\\s*$",
              "code": "def __init__(self): pass"
            },
            {
              "line": 28,
              "pattern": "pass\\s*$",
              "code": "def __init__(self, **kwargs): pass"
            },
            {
              "line": 30,
              "pattern": "pass\\s*$",
              "code": "def __init__(self): pass"
            },
            {
              "line": 26,
              "pattern": "empty function",
              "code": "def __init__(...): pass"
            },
            {
              "line": 28,
              "pattern": "empty function",
              "code": "def __init__(...): pass"
            },
            {
              "line": 30,
              "pattern": "empty function",
              "code": "def __init__(...): pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "communication/collective/memory_manager.py": {
          "dummy_implementations": [
            {
              "line": 46,
              "pattern": "pass\\s*$",
              "code": "def __init__(self): pass"
            }
          ],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "communication/collective/graph_builder.py": {
          "dummy_implementations": [
            {
              "line": 22,
              "pattern": "pass\\s*$",
              "code": "def __init__(self, state_class): pass"
            },
            {
              "line": 23,
              "pattern": "pass\\s*$",
              "code": "def add_node(self, name, func): pass"
            },
            {
              "line": 24,
              "pattern": "pass\\s*$",
              "code": "def add_edge(self, from_node, to_node): pass"
            },
            {
              "line": 25,
              "pattern": "pass\\s*$",
              "code": "def add_conditional_edges(self, from_node, condition, mapping): pass"
            },
            {
              "line": 26,
              "pattern": "pass\\s*$",
              "code": "def set_entry_point(self, node): pass"
            },
            {
              "line": 46,
              "pattern": "pass\\s*$",
              "code": "def __init__(self): pass"
            },
            {
              "line": 22,
              "pattern": "empty function",
              "code": "def __init__(...): pass"
            },
            {
              "line": 23,
              "pattern": "empty function",
              "code": "def add_node(...): pass"
            },
            {
              "line": 24,
              "pattern": "empty function",
              "code": "def add_edge(...): pass"
            },
            {
              "line": 25,
              "pattern": "empty function",
              "code": "def add_conditional_edges(...): pass"
            },
            {
              "line": 26,
              "pattern": "empty function",
              "code": "def set_entry_point(...): pass"
            },
            {
              "line": 46,
              "pattern": "empty function",
              "code": "def __init__(...): pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "communication/collective/supervisor.py": {
          "dummy_implementations": [
            {
              "line": 25,
              "pattern": "pass\\s*$",
              "code": "def __init__(self): pass"
            },
            {
              "line": 235,
              "pattern": "return\\s*{\\s*}",
              "code": "return {}"
            },
            {
              "line": 237,
              "pattern": "return\\s*{\\s*}",
              "code": "return {}"
            },
            {
              "line": 25,
              "pattern": "empty function",
              "code": "def __init__(...): pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "components": {
      "total_files": 6,
      "dummy_files": 4,
      "needs_update": 2,
      "missing_init": true,
      "missing_tests": true,
      "files": {
        "components/real_components.py": {
          "dummy_implementations": [
            {
              "line": 2,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "REAL Component Classes - No more fake string matching"
            },
            {
              "line": 357,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Warmup BERT model with dummy inference\"\"\""
            },
            {
              "line": 363,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Dummy inference for warmup"
            },
            {
              "line": 364,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "dummy_text = \"warmup inference to optimize GPU context\""
            },
            {
              "line": 365,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "inputs = tokenizer(dummy_text, return_tensors='pt', truncation=True, max_length=512)"
            },
            {
              "line": 836,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Handle different input formats - create dummy hidden states if needed"
            },
            {
              "line": 1035,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Create dummy input"
            },
            {
              "line": 1101,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Create dummy initial state"
            },
            {
              "line": 1166,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "'key': f'mock_{hash(str(data))}',"
            },
            {
              "line": 1167,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "'mock': True,"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [
            "dangerous eval/exec"
          ],
          "security_issues": []
        },
        "components/async_batch_processor.py": {
          "dummy_implementations": [
            {
              "line": 152,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 555,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "components/production_registry.py": {
          "dummy_implementations": [
            {
              "line": 2,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "REAL Production Component Registry - No More Mocks"
            },
            {
              "line": 349,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 372,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 379,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [
            "dangerous eval/exec"
          ],
          "security_issues": []
        },
        "components/real_registry.py": {
          "dummy_implementations": [
            {
              "line": 3,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "No mocking - real components with real processing"
            },
            {
              "line": 155,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# REMOVED: All fake _process_* methods - now using real component classes"
            },
            {
              "line": 251,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 276,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Default: return component info instead of fake data"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "config": {
      "total_files": 11,
      "dummy_files": 0,
      "needs_update": 0,
      "missing_init": false,
      "missing_tests": true,
      "files": {}
    },
    "consciousness": {
      "total_files": 5,
      "dummy_files": 0,
      "needs_update": 0,
      "missing_init": false,
      "missing_tests": true,
      "files": {}
    },
    "consensus": {
      "total_files": 8,
      "dummy_files": 2,
      "needs_update": 1,
      "missing_init": false,
      "missing_tests": true,
      "files": {
        "consensus/types.py": {
          "dummy_implementations": [
            {
              "line": 359,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return True  # Placeholder"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "consensus/examples.py": {
          "dummy_implementations": [],
          "missing_features": [],
          "outdated_patterns": [
            "dangerous eval/exec"
          ],
          "security_issues": []
        },
        "consensus/raft.py": {
          "dummy_implementations": [
            {
              "line": 168,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 177,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "coral": {
      "total_files": 4,
      "dummy_files": 1,
      "needs_update": 0,
      "missing_init": true,
      "missing_tests": true,
      "files": {
        "coral/communication.py": {
          "dummy_implementations": [
            {
              "line": 146,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "influence = np.random.uniform(0.1, 0.9)  # Placeholder"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "core": {
      "total_files": 26,
      "dummy_files": 11,
      "needs_update": 4,
      "missing_init": false,
      "missing_tests": true,
      "files": {
        "core/consciousness.py": {
          "dummy_implementations": [
            {
              "line": 502,
              "pattern": "pass\\s*$",
              "code": "async def initialize(self): pass"
            },
            {
              "line": 504,
              "pattern": "pass\\s*$",
              "code": "async def cleanup(self): pass"
            },
            {
              "line": 508,
              "pattern": "pass\\s*$",
              "code": "async def initialize(self): pass"
            },
            {
              "line": 510,
              "pattern": "pass\\s*$",
              "code": "async def cleanup(self): pass"
            },
            {
              "line": 514,
              "pattern": "pass\\s*$",
              "code": "async def initialize(self): pass"
            },
            {
              "line": 516,
              "pattern": "pass\\s*$",
              "code": "async def activate_emergency_mode(self): pass"
            },
            {
              "line": 517,
              "pattern": "pass\\s*$",
              "code": "async def cleanup(self): pass"
            },
            {
              "line": 521,
              "pattern": "pass\\s*$",
              "code": "async def initialize(self): pass"
            },
            {
              "line": 523,
              "pattern": "pass\\s*$",
              "code": "async def cleanup(self): pass"
            },
            {
              "line": 527,
              "pattern": "pass\\s*$",
              "code": "async def initialize(self): pass"
            },
            {
              "line": 529,
              "pattern": "pass\\s*$",
              "code": "async def cleanup(self): pass"
            },
            {
              "line": 533,
              "pattern": "pass\\s*$",
              "code": "async def initialize(self): pass"
            },
            {
              "line": 542,
              "pattern": "pass\\s*$",
              "code": "async def cleanup(self): pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "core/testing.py": {
          "dummy_implementations": [
            {
              "line": 429,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Simulate proof checking (placeholder for actual prover integration).\"\"\""
            },
            {
              "line": 430,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# This is a placeholder - real implementation would interface with actual provers"
            },
            {
              "line": 488,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "state1 = np.random.binomial(1, 0.5, 100)  # Placeholder"
            },
            {
              "line": 489,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "state2 = np.random.binomial(1, 0.5, 100)  # Placeholder"
            },
            {
              "line": 734,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Placeholder for quantum simulation"
            },
            {
              "line": 900,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 921,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 926,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 1046,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "property_function=lambda x: True,  # Placeholder"
            },
            {
              "line": 1062,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "property_function=lambda x: True,  # Placeholder"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "core/types.py": {
          "dummy_implementations": [
            {
              "line": 151,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 156,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "core/unified_system.py": {
          "dummy_implementations": [
            {
              "line": 196,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 203,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "core/topology.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "observability",
              "expected": [
                "opentelemetry",
                "prometheus",
                "jaeger"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "core/config.py": {
          "dummy_implementations": [
            {
              "line": 151,
              "pattern": "return\\s*{\\s*}",
              "code": "return {}"
            },
            {
              "line": 181,
              "pattern": "return\\s*{\\s*}",
              "code": "return {}"
            },
            {
              "line": 185,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Placeholder for remote configuration loading"
            },
            {
              "line": 188,
              "pattern": "return\\s*{\\s*}",
              "code": "return {}"
            },
            {
              "line": 218,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 225,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "core/memory.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "core/unified_interfaces.py": {
          "dummy_implementations": [
            {
              "line": 148,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 153,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 158,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 163,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 172,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 177,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 182,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 191,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 288,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 293,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 298,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 306,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 311,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 316,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 321,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 329,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 334,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 339,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 344,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 352,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 357,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 362,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 370,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 375,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 380,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 467,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "core/interfaces.py": {
          "dummy_implementations": [
            {
              "line": 61,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 66,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 71,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 76,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 81,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 100,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 105,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 110,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 115,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 129,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 134,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 139,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 153,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 158,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 163,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 168,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 177,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 182,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 191,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 196,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 205,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 210,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 215,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "core/error_topology.py": {
          "dummy_implementations": [
            {
              "line": 445,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            }
          ],
          "missing_features": [
            {
              "category": "observability",
              "expected": [
                "opentelemetry",
                "prometheus",
                "jaeger"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "core/exceptions.py": {
          "dummy_implementations": [
            {
              "line": 572,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "core/consensus/types.py": {
          "dummy_implementations": [
            {
              "line": 359,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return True  # Placeholder"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "core/consensus/examples.py": {
          "dummy_implementations": [],
          "missing_features": [],
          "outdated_patterns": [
            "dangerous eval/exec"
          ],
          "security_issues": []
        },
        "core/consensus/raft.py": {
          "dummy_implementations": [
            {
              "line": 168,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 177,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "distributed": {
      "total_files": 3,
      "dummy_files": 1,
      "needs_update": 0,
      "missing_init": true,
      "missing_tests": true,
      "files": {
        "distributed/real_ray_system.py": {
          "dummy_implementations": [
            {
              "line": 4,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "No more mocks - actual Ray actors with real distributed processing"
            },
            {
              "line": 39,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Real processing - no mocks\"\"\""
            },
            {
              "line": 87,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Real Ray distributed system - no mocks\"\"\""
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "dpo": {
      "total_files": 3,
      "dummy_files": 3,
      "needs_update": 0,
      "missing_init": true,
      "missing_tests": true,
      "files": {
        "dpo/preference_optimizer.py": {
          "dummy_implementations": [
            {
              "line": 341,
              "pattern": "pass\\s*$",
              "code": "# Backward pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "dpo/production_dpo.py": {
          "dummy_implementations": [
            {
              "line": 380,
              "pattern": "pass\\s*$",
              "code": "# Backward pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "dpo/real_constitutional_ai.py": {
          "dummy_implementations": [
            {
              "line": 4,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "No more mocks - actual preference learning with real datasets"
            },
            {
              "line": 153,
              "pattern": "pass\\s*$",
              "code": "# Forward pass"
            },
            {
              "line": 176,
              "pattern": "pass\\s*$",
              "code": "# Backward pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "enterprise": {
      "total_files": 24,
      "dummy_files": 13,
      "needs_update": 4,
      "missing_init": false,
      "missing_tests": true,
      "files": {
        "enterprise/enhanced_knowledge_graph.py": {
          "dummy_implementations": [
            {
              "line": 570,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "enterprise/vector_database.py": {
          "dummy_implementations": [
            {
              "line": 267,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 359,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Test query performance with dummy vector"
            },
            {
              "line": 361,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "dummy_vector = [0.0] * self.vector_size"
            },
            {
              "line": 364,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "query_vector=dummy_vector,"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "enterprise/__init__.py": {
          "dummy_implementations": [
            {
              "line": 47,
              "pattern": "pass\\s*$",
              "code": "def __init__(self): pass"
            },
            {
              "line": 50,
              "pattern": "pass\\s*$",
              "code": "def __init__(self): pass"
            },
            {
              "line": 53,
              "pattern": "pass\\s*$",
              "code": "def __init__(self): pass"
            },
            {
              "line": 56,
              "pattern": "pass\\s*$",
              "code": "def __init__(self): pass"
            },
            {
              "line": 47,
              "pattern": "empty function",
              "code": "def __init__(...): pass"
            },
            {
              "line": 50,
              "pattern": "empty function",
              "code": "def __init__(...): pass"
            },
            {
              "line": 53,
              "pattern": "empty function",
              "code": "def __init__(...): pass"
            },
            {
              "line": 56,
              "pattern": "empty function",
              "code": "def __init__(...): pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "enterprise/knowledge_graph.py": {
          "dummy_implementations": [
            {
              "line": 436,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "enterprise/mem0_search/deps.py": {
          "dummy_implementations": [
            {
              "line": 283,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"response_time_ms\": 1.0  # Placeholder"
            },
            {
              "line": 304,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"response_time_ms\": 1.0  # Placeholder"
            }
          ],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "enterprise/mem0_search/endpoints.py": {
          "dummy_implementations": [
            {
              "line": 402,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 425,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 441,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 467,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return [], []"
            },
            {
              "line": 489,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return [], []"
            },
            {
              "line": 553,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# For now, return placeholder"
            },
            {
              "line": 579,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# For now, return placeholder"
            },
            {
              "line": 603,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# For now, return placeholder"
            },
            {
              "line": 711,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 742,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 766,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 855,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 882,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 961,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 989,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 1007,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 1016,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 1084,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            }
          ],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "enterprise/mem0_search/__init__.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "enterprise/mem0_search/schemas.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "enterprise/mem0_hot/vectorize.py": {
          "dummy_implementations": [
            {
              "line": 255,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "enterprise/mem0_hot/scheduler.py": {
          "dummy_implementations": [
            {
              "line": 137,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 144,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "enterprise/mem0_hot/archive.py": {
          "dummy_implementations": [
            {
              "line": 252,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 644,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 652,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 971,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "placeholders = ','.join(['?' for _ in signature_hashes])"
            },
            {
              "line": 975,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "WHERE signature_hash IN ({placeholders})"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "enterprise/mem0_hot/resilience.py": {
          "dummy_implementations": [
            {
              "line": 336,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "enterprise/mem0_semantic/sync.py": {
          "dummy_implementations": [
            {
              "line": 163,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 220,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 292,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 601,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "enterprise/mem0_semantic/consolidation.py": {
          "dummy_implementations": [
            {
              "line": 424,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 472,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "enterprise/mem0_semantic/rank.py": {
          "dummy_implementations": [
            {
              "line": 151,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 537,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 550,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "events": {
      "total_files": 9,
      "dummy_files": 5,
      "needs_update": 2,
      "missing_init": false,
      "missing_tests": true,
      "files": {
        "events/streams.py": {
          "dummy_implementations": [
            {
              "line": 288,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "events/event_bus.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "streaming",
              "expected": [
                "kafka",
                "pulsar",
                "nats",
                "redpanda"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "events/consumers.py": {
          "dummy_implementations": [
            {
              "line": 131,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 450,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "events/connectors.py": {
          "dummy_implementations": [
            {
              "line": 189,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 305,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 614,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 619,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "events/bus.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "streaming",
              "expected": [
                "kafka",
                "pulsar",
                "nats",
                "redpanda"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "events/real_event_sourcing.py": {
          "dummy_implementations": [
            {
              "line": 36,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return f\"mock_{event['id']}\""
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "events/producers.py": {
          "dummy_implementations": [
            {
              "line": 394,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "examples": {
      "total_files": 2,
      "dummy_files": 0,
      "needs_update": 1,
      "missing_init": true,
      "missing_tests": true,
      "files": {
        "examples/gpu_allocation_scenario.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "gpu_accel",
              "expected": [
                "cuda",
                "triton",
                "tensorrt",
                "onnx"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "governance": {
      "total_files": 13,
      "dummy_files": 2,
      "needs_update": 1,
      "missing_init": false,
      "missing_tests": true,
      "files": {
        "governance/metrics.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "observability",
              "expected": [
                "opentelemetry",
                "prometheus",
                "jaeger"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "governance/database.py": {
          "dummy_implementations": [
            {
              "line": 179,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 250,
              "pattern": "return\\s*{\\s*}",
              "code": "return {}"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "governance/real_policy_engine.py": {
          "dummy_implementations": [
            {
              "line": 27,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "graph": {
      "total_files": 1,
      "dummy_files": 1,
      "needs_update": 0,
      "missing_init": true,
      "missing_tests": true,
      "files": {
        "graph/neo4j_integration.py": {
          "dummy_implementations": [
            {
              "line": 17,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockNeo4jDriver:"
            },
            {
              "line": 22,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "logger.info(f\"Mock Neo4j driver initialized: {uri}\")"
            },
            {
              "line": 25,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return MockNeo4jSession(self.session_data)"
            },
            {
              "line": 51,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockNeo4jSession:"
            },
            {
              "line": 57,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return MockNeo4jResult([{\"created\": True}])"
            },
            {
              "line": 60,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return MockNeo4jResult(["
            },
            {
              "line": 65,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return MockNeo4jResult(["
            },
            {
              "line": 68,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return MockNeo4jResult([])"
            },
            {
              "line": 94,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockNeo4jResult:"
            },
            {
              "line": 116,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "logger.warning(f\"Failed to connect to Neo4j, using mock: {e}\")"
            },
            {
              "line": 117,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "self.driver = MockNeo4jDriver(self.uri, (self.username, self.password))"
            },
            {
              "line": 120,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "logger.warning(\"neo4j driver not installed, using mock\")"
            },
            {
              "line": 121,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "self.driver = MockNeo4jDriver(self.uri, (self.username, self.password))"
            },
            {
              "line": 126,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 134,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "inference": {
      "total_files": 2,
      "dummy_files": 0,
      "needs_update": 0,
      "missing_init": false,
      "missing_tests": true,
      "files": {}
    },
    "infrastructure": {
      "total_files": 4,
      "dummy_files": 2,
      "needs_update": 0,
      "missing_init": false,
      "missing_tests": true,
      "files": {
        "infrastructure/kafka_event_mesh.py": {
          "dummy_implementations": [
            {
              "line": 195,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# This is a placeholder for the interface"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "infrastructure/__init__.py": {
          "dummy_implementations": [
            {
              "line": 49,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 52,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "innovations": {
      "total_files": 2,
      "dummy_files": 1,
      "needs_update": 1,
      "missing_init": true,
      "missing_tests": true,
      "files": {
        "innovations/hybrid_memory_2025.py": {
          "dummy_implementations": [
            {
              "line": 77,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 87,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "integration": {
      "total_files": 7,
      "dummy_files": 5,
      "needs_update": 1,
      "missing_init": true,
      "missing_tests": true,
      "files": {
        "integration/tda_neo4j_bridge.py": {
          "dummy_implementations": [
            {
              "line": 160,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "integration/lnn_council_system.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "integration/mem0_neo4j_bridge.py": {
          "dummy_implementations": [
            {
              "line": 158,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "integration/advanced_workflow_integration.py": {
          "dummy_implementations": [
            {
              "line": 392,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 409,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 421,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Execute the proposed action (mock implementation)\"\"\""
            },
            {
              "line": 426,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock success rates based on action type"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "integration/real_system_2025.py": {
          "dummy_implementations": [
            {
              "line": 28,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "No mocking - real data flow and processing"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "integration/complete_system_2025.py": {
          "dummy_implementations": [
            {
              "line": 285,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "integrations": {
      "total_files": 7,
      "dummy_files": 3,
      "needs_update": 0,
      "missing_init": false,
      "missing_tests": true,
      "files": {
        "integrations/enhanced_workflow_orchestrator.py": {
          "dummy_implementations": [
            {
              "line": 472,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 668,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "integrations/__init__.py": {
          "dummy_implementations": [
            {
              "line": 10,
              "pattern": "pass\\s*$",
              "code": "def __init__(self, config, consciousness): pass"
            },
            {
              "line": 11,
              "pattern": "pass\\s*$",
              "code": "async def initialize(self): pass"
            },
            {
              "line": 13,
              "pattern": "pass\\s*$",
              "code": "async def cleanup(self): pass"
            },
            {
              "line": 16,
              "pattern": "pass\\s*$",
              "code": "def __init__(self, config, consciousness): pass"
            },
            {
              "line": 17,
              "pattern": "pass\\s*$",
              "code": "async def initialize(self): pass"
            },
            {
              "line": 20,
              "pattern": "pass\\s*$",
              "code": "async def cleanup(self): pass"
            },
            {
              "line": 23,
              "pattern": "pass\\s*$",
              "code": "def __init__(self, config, consciousness): pass"
            },
            {
              "line": 24,
              "pattern": "pass\\s*$",
              "code": "async def initialize(self): pass"
            },
            {
              "line": 26,
              "pattern": "pass\\s*$",
              "code": "async def cleanup(self): pass"
            },
            {
              "line": 29,
              "pattern": "pass\\s*$",
              "code": "def __init__(self, config, consciousness): pass"
            },
            {
              "line": 30,
              "pattern": "pass\\s*$",
              "code": "async def initialize(self): pass"
            },
            {
              "line": 32,
              "pattern": "pass\\s*$",
              "code": "async def cleanup(self): pass"
            },
            {
              "line": 36,
              "pattern": "pass\\s*$",
              "code": "def __init__(self, config, consciousness): pass"
            },
            {
              "line": 37,
              "pattern": "pass\\s*$",
              "code": "async def initialize(self): pass"
            },
            {
              "line": 40,
              "pattern": "pass\\s*$",
              "code": "async def cleanup(self): pass"
            },
            {
              "line": 10,
              "pattern": "empty function",
              "code": "def __init__(...): pass"
            },
            {
              "line": 16,
              "pattern": "empty function",
              "code": "def __init__(...): pass"
            },
            {
              "line": 23,
              "pattern": "empty function",
              "code": "def __init__(...): pass"
            },
            {
              "line": 29,
              "pattern": "empty function",
              "code": "def __init__(...): pass"
            },
            {
              "line": 36,
              "pattern": "empty function",
              "code": "def __init__(...): pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "integrations/integration/advanced_workflow_integration.py": {
          "dummy_implementations": [
            {
              "line": 392,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 409,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 421,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Execute the proposed action (mock implementation)\"\"\""
            },
            {
              "line": 426,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock success rates based on action type"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "lnn": {
      "total_files": 8,
      "dummy_files": 4,
      "needs_update": 6,
      "missing_init": false,
      "missing_tests": true,
      "files": {
        "lnn/real_mit_lnn.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "lnn/core.py": {
          "dummy_implementations": [
            {
              "line": 636,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def to_onnx(self, dummy_input: torch.Tensor, path: str):"
            },
            {
              "line": 640,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "dummy_input,"
            }
          ],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "lnn/dynamics.py": {
          "dummy_implementations": [
            {
              "line": 26,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "lnn/edge_deployment.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            }
          ],
          "outdated_patterns": [
            "dangerous eval/exec"
          ],
          "security_issues": []
        },
        "lnn/training.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "lnn/utils.py": {
          "dummy_implementations": [
            {
              "line": 10,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return torch.eye(10)  # Placeholder"
            },
            {
              "line": 14,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 22,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "lnn/architectures.py": {
          "dummy_implementations": [
            {
              "line": 11,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "memory": {
      "total_files": 33,
      "dummy_files": 12,
      "needs_update": 30,
      "missing_init": true,
      "missing_tests": true,
      "files": {
        "memory/simple_smoke_test.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "memory/observability.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "memory/cxl_memory_pool.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "memory/redis_store.py": {
          "dummy_implementations": [
            {
              "line": 379,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            }
          ],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "memory/knn_index.py": {
          "dummy_implementations": [
            {
              "line": 63,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 68,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 73,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 135,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 185,
              "pattern": "raise\\s+NotImplementedError",
              "code": "raise NotImplementedError(\"Faiss backend not yet implemented\")"
            },
            {
              "line": 188,
              "pattern": "raise\\s+NotImplementedError",
              "code": "raise NotImplementedError(\"Annoy backend not yet implemented\")"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "memory/shape_memory_v2_clean.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "memory/hybrid_manager.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "memory/test_compression.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "memory/fusion_scorer.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "memory/async_shape_memory.py": {
          "dummy_implementations": [
            {
              "line": 293,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 296,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            }
          ],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "memory/test_critical_fixes.py": {
          "dummy_implementations": [
            {
              "line": 10,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "from unittest.mock import Mock, patch"
            },
            {
              "line": 86,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Create a mock storage that fails"
            },
            {
              "line": 87,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "with patch.object(self.memory.storage, 'search') as mock_search:"
            },
            {
              "line": 88,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mock_search.side_effect = Exception(\"Database connection failed\")"
            },
            {
              "line": 118,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock the storage to capture what's stored"
            },
            {
              "line": 196,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def dummy_function():"
            },
            {
              "line": 212,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def test_version_filter_included(self, mock_redis):"
            },
            {
              "line": 218,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Set up mocks"
            },
            {
              "line": 219,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mock_instance = Mock()"
            },
            {
              "line": 220,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mock_redis.return_value = mock_instance"
            },
            {
              "line": 222,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock index exists"
            },
            {
              "line": 223,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mock_instance.ft.return_value.info.return_value = {\"num_docs\": 100}"
            },
            {
              "line": 228,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# We need to mock the pool creation"
            },
            {
              "line": 229,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "with patch('redis.BlockingConnectionPool.from_url') as mock_pool:"
            },
            {
              "line": 230,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mock_pool.return_value = Mock()"
            },
            {
              "line": 233,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock search to capture the query"
            },
            {
              "line": 238,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Return mock results"
            },
            {
              "line": 239,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mock_result = Mock()"
            },
            {
              "line": 240,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mock_result.docs = []"
            },
            {
              "line": 241,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return mock_result"
            },
            {
              "line": 243,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mock_instance.ft.return_value.search = capture_search"
            }
          ],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "memory/fastrp.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "memory/shadow_deployment.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "memory/topo_features.py": {
          "dummy_implementations": [
            {
              "line": 147,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Calculate by extracting from dummy data"
            },
            {
              "line": 148,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "dummy_betti = BettiNumbers(b0=1, b1=0, b2=0)"
            },
            {
              "line": 149,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "dummy_diagram = np.array([[0, 1]])"
            },
            {
              "line": 150,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "features = self.extract(dummy_betti, dummy_diagram)"
            }
          ],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "memory/fastrp_embeddings.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "memory/memory_bus_adapter_clean.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "memory/hyperoak_adapter.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "memory/test_decorator_ordering.py": {
          "dummy_implementations": [
            {
              "line": 10,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "from unittest.mock import Mock, patch, call"
            },
            {
              "line": 117,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def test_redis_store_handles_transient_errors(self, mock_redis):"
            },
            {
              "line": 123,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Set up mock to fail twice then succeed"
            },
            {
              "line": 124,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mock_instance = Mock()"
            },
            {
              "line": 125,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mock_redis.return_value = mock_instance"
            },
            {
              "line": 127,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Create a mock that fails twice then succeeds"
            },
            {
              "line": 136,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock the pipeline execution"
            },
            {
              "line": 137,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mock_pipeline = Mock()"
            },
            {
              "line": 138,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mock_pipeline.execute.side_effect = side_effect"
            },
            {
              "line": 139,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mock_instance.pipeline.return_value = mock_pipeline"
            },
            {
              "line": 141,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Create store (this will try to create index, which we'll mock)"
            },
            {
              "line": 142,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mock_instance.ft.return_value.info.side_effect = Exception(\"No index\")"
            },
            {
              "line": 143,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mock_instance.ft.return_value.create_index.return_value = None"
            }
          ],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "memory/storage_interface.py": {
          "dummy_implementations": [
            {
              "line": 27,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 38,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 43,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 48,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 53,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "memory/shape_memory_v2_prod.py": {
          "dummy_implementations": [
            {
              "line": 193,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            }
          ],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "memory/shape_memory_v2.py": {
          "dummy_implementations": [
            {
              "line": 276,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 348,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "memory/causal_pattern_store.py": {
          "dummy_implementations": [
            {
              "line": 249,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 385,
              "pattern": "return\\s*{\\s*}",
              "code": "return {}"
            }
          ],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "memory/memory_bus_adapter.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "memory/test_metrics_updater.py": {
          "dummy_implementations": [
            {
              "line": 9,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "from unittest.mock import Mock, MagicMock"
            },
            {
              "line": 11,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock the dependencies"
            },
            {
              "line": 12,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockRedisStore:"
            },
            {
              "line": 14,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "self.redis = MagicMock()"
            },
            {
              "line": 15,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "self.redis.ft.return_value.info.return_value = MagicMock(num_docs=100)"
            },
            {
              "line": 33,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Create mock store"
            },
            {
              "line": 34,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mock_store = MockRedisStore()"
            },
            {
              "line": 38,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "updater = MetricsUpdater(mock_store, interval=1)"
            },
            {
              "line": 72,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "updater = MetricsUpdater(mock_store, interval=1)"
            },
            {
              "line": 103,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock the update_vector_count function"
            },
            {
              "line": 105,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "sys.modules['observability'] = MagicMock()"
            }
          ],
          "missing_features": [
            {
              "category": "observability",
              "expected": [
                "opentelemetry",
                "prometheus",
                "jaeger"
              ]
            },
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [
            "blocking sleep instead of async"
          ],
          "security_issues": []
        },
        "memory/neo4j_etl.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [
            "blocking sleep instead of async"
          ],
          "security_issues": []
        },
        "memory/mem0_integration.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "memory/smoke_test.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "memory/neo4j_motifcost.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [
            "insecure pickle usage"
          ],
          "security_issues": []
        },
        "memory/knn_index_real.py": {
          "dummy_implementations": [
            {
              "line": 6,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "NO DUMMY IMPLEMENTATIONS - Everything computes real results."
            },
            {
              "line": 75,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 80,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 85,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 90,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 95,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 215,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 393,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 517,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [
            "insecure pickle usage"
          ],
          "security_issues": []
        },
        "memory/test_knn_index.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "memory/shape_aware_memory.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "memory/benchmarks/run_production_benchmark.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "memory_tiers": {
      "total_files": 2,
      "dummy_files": 1,
      "needs_update": 2,
      "missing_init": true,
      "missing_tests": true,
      "files": {
        "memory_tiers/cxl_memory.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [
            "blocking sleep instead of async",
            "insecure pickle usage"
          ],
          "security_issues": []
        },
        "memory_tiers/real_hybrid_memory.py": {
          "dummy_implementations": [
            {
              "line": 184,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [
            "blocking sleep instead of async"
          ],
          "security_issues": []
        }
      }
    },
    "models": {
      "total_files": 1,
      "dummy_files": 1,
      "needs_update": 0,
      "missing_init": true,
      "missing_tests": true,
      "files": {
        "models/phformer_tiny.py": {
          "dummy_implementations": [
            {
              "line": 155,
              "pattern": "pass\\s*$",
              "code": "Efficient attention forward pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "moe": {
      "total_files": 4,
      "dummy_files": 0,
      "needs_update": 0,
      "missing_init": true,
      "missing_tests": true,
      "files": {}
    },
    "monitoring": {
      "total_files": 4,
      "dummy_files": 1,
      "needs_update": 4,
      "missing_init": false,
      "missing_tests": true,
      "files": {
        "monitoring/production_monitor.py": {
          "dummy_implementations": [
            {
              "line": 544,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [
            {
              "category": "observability",
              "expected": [
                "opentelemetry",
                "prometheus",
                "jaeger"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "monitoring/business_metrics.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "observability",
              "expected": [
                "opentelemetry",
                "prometheus",
                "jaeger"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "monitoring/real_time_dashboard.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "observability",
              "expected": [
                "opentelemetry",
                "prometheus",
                "jaeger"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "monitoring/__init__.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "observability",
              "expected": [
                "opentelemetry",
                "prometheus",
                "jaeger"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "multimodal": {
      "total_files": 1,
      "dummy_files": 1,
      "needs_update": 0,
      "missing_init": true,
      "missing_tests": true,
      "files": {
        "multimodal/advanced_processing.py": {
          "dummy_implementations": [
            {
              "line": 504,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Dummy image"
            },
            {
              "line": 512,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Dummy spectrogram"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "network": {
      "total_files": 3,
      "dummy_files": 1,
      "needs_update": 3,
      "missing_init": true,
      "missing_tests": true,
      "files": {
        "network/websub_protocol.py": {
          "dummy_implementations": [
            {
              "line": 367,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "network/real_protocols.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "network/diff_comm_v2b.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "neural": {
      "total_files": 10,
      "dummy_files": 3,
      "needs_update": 6,
      "missing_init": false,
      "missing_tests": true,
      "files": {
        "neural/lnn_consensus.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "neural/lnn_workflows.py": {
          "dummy_implementations": [
            {
              "line": 152,
              "pattern": "pass\\s*$",
              "code": "# Forward pass"
            },
            {
              "line": 157,
              "pattern": "pass\\s*$",
              "code": "# Backward pass"
            }
          ],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            }
          ],
          "outdated_patterns": [
            "dangerous eval/exec"
          ],
          "security_issues": []
        },
        "neural/liquid_real.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "neural/liquid_2025.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "neural/context_integration.py": {
          "dummy_implementations": [
            {
              "line": 192,
              "pattern": "return\\s*{\\s*}",
              "code": "return {}"
            },
            {
              "line": 217,
              "pattern": "return\\s*{\\s*}",
              "code": "return {}"
            },
            {
              "line": 223,
              "pattern": "return\\s*{\\s*}",
              "code": "return {}"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "neural/__init__.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "neural/memory_hooks.py": {
          "dummy_implementations": [
            {
              "line": 79,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 167,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 187,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            }
          ],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            },
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "neuromorphic": {
      "total_files": 1,
      "dummy_files": 0,
      "needs_update": 0,
      "missing_init": true,
      "missing_tests": true,
      "files": {}
    },
    "observability": {
      "total_files": 20,
      "dummy_files": 11,
      "needs_update": 2,
      "missing_init": false,
      "missing_tests": true,
      "files": {
        "observability/layer.py": {
          "dummy_implementations": [
            {
              "line": 36,
              "pattern": "return\\s*{\\s*}",
              "code": "return {}"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "observability/health_monitor.py": {
          "dummy_implementations": [
            {
              "line": 549,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "observability/langsmith_integration.py": {
          "dummy_implementations": [
            {
              "line": 462,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 482,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "observability/structured_logging.py": {
          "dummy_implementations": [
            {
              "line": 151,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "observability/core.py": {
          "dummy_implementations": [
            {
              "line": 38,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock CollectiveState for standalone testing"
            },
            {
              "line": 40,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock CollectiveState for standalone testing.\"\"\""
            },
            {
              "line": 43,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "self.workflow_id = \"mock_workflow\""
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "observability/tracing.py": {
          "dummy_implementations": [
            {
              "line": 66,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockSampler:"
            },
            {
              "line": 67,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock sampler when OpenTelemetry is not available\"\"\""
            },
            {
              "line": 95,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockSpan:"
            },
            {
              "line": 96,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock span when OpenTelemetry is not available\"\"\""
            },
            {
              "line": 245,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "sampling = type('sampling', (), {'Sampler': MockSampler})()"
            },
            {
              "line": 246,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "trace = type('trace', (), {'get_tracer': lambda *args: type('tracer', (), {'start_span': lambda *args, **kwargs: MockSpan()})()})()"
            },
            {
              "line": 249,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class AdaptiveSampler(sampling.Sampler if OPENTELEMETRY_AVAILABLE else MockSampler):"
            },
            {
              "line": 431,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "observability/anomaly_detection.py": {
          "dummy_implementations": [
            {
              "line": 199,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 491,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "observability/opentelemetry_integration.py": {
          "dummy_implementations": [
            {
              "line": 10,
              "pattern": "TODO|FIXME|XXX",
              "code": "TODO: Restore full functionality after core integration works"
            },
            {
              "line": 40,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Create mock objects for testing"
            },
            {
              "line": 41,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockTrace:"
            },
            {
              "line": 43,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return MockTracer()"
            },
            {
              "line": 44,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "trace = MockTrace()"
            },
            {
              "line": 61,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockTracer:"
            },
            {
              "line": 62,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock tracer for testing when OpenTelemetry not available.\"\"\""
            },
            {
              "line": 64,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return MockSpan(name)"
            },
            {
              "line": 67,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockSpan:"
            },
            {
              "line": 68,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock span for testing when OpenTelemetry not available.\"\"\""
            },
            {
              "line": 170,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "self.tracer = MockTracer()"
            },
            {
              "line": 197,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 201,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "print(\"\ud83d\udd27 OpenTelemetryManager: Mock initialization complete\")"
            },
            {
              "line": 208,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 212,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "print(\"\ud83d\udd27 OpenTelemetryManager: Mock shutdown complete\")"
            },
            {
              "line": 216,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 222,
              "pattern": "pass\\s*$",
              "code": "#     pass"
            },
            {
              "line": 226,
              "pattern": "pass\\s*$",
              "code": "#     pass"
            },
            {
              "line": 230,
              "pattern": "pass\\s*$",
              "code": "#     pass"
            },
            {
              "line": 234,
              "pattern": "pass\\s*$",
              "code": "#     pass"
            },
            {
              "line": 238,
              "pattern": "pass\\s*$",
              "code": "#     pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "observability/shadow_mode_logger.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "observability",
              "expected": [
                "opentelemetry",
                "prometheus",
                "jaeger"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "observability/dashboard.py": {
          "dummy_implementations": [
            {
              "line": 332,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# This is a placeholder"
            },
            {
              "line": 338,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# This is a placeholder"
            },
            {
              "line": 360,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Placeholder implementation"
            },
            {
              "line": 406,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 411,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "observability/neural_metrics.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            },
            {
              "category": "observability",
              "expected": [
                "opentelemetry",
                "prometheus",
                "jaeger"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "observability/prometheus_metrics.py": {
          "dummy_implementations": [
            {
              "line": 8,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "observability/knowledge_graph.py": {
          "dummy_implementations": [
            {
              "line": 488,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 535,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 549,
              "pattern": "return\\s*{\\s*}",
              "code": "return {}"
            },
            {
              "line": 603,
              "pattern": "return\\s*{\\s*}",
              "code": "return {}"
            },
            {
              "line": 614,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "orchestration": {
      "total_files": 76,
      "dummy_files": 40,
      "needs_update": 21,
      "missing_init": false,
      "missing_tests": true,
      "files": {
        "orchestration/adaptive_checkpoint.py": {
          "dummy_implementations": [],
          "missing_features": [],
          "outdated_patterns": [
            "insecure pickle usage"
          ],
          "security_issues": []
        },
        "orchestration/bus_metrics.py": {
          "dummy_implementations": [
            {
              "line": 139,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 143,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/temporal_signalfirst.py": {
          "dummy_implementations": [
            {
              "line": 391,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Send signal to Temporal workflow (placeholder)\"\"\""
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/bus_protocol.py": {
          "dummy_implementations": [
            {
              "line": 96,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/langgraph_workflows.py": {
          "dummy_implementations": [
            {
              "line": 68,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Initialize placeholders for missing agents (to be implemented)"
            },
            {
              "line": 89,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Add placeholder nodes for missing agents"
            },
            {
              "line": 216,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Researcher agent node - knowledge discovery (placeholder).\"\"\""
            },
            {
              "line": 237,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Optimizer agent node - performance optimization (placeholder).\"\"\""
            },
            {
              "line": 258,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Guardian agent node - security and compliance (placeholder).\"\"\""
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/workflows.py": {
          "dummy_implementations": [
            {
              "line": 825,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock memory enrichment - replace with LangMem in production"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/event_driven_triggers.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "streaming",
              "expected": [
                "kafka",
                "pulsar",
                "nats",
                "redpanda"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/checkpoints.py": {
          "dummy_implementations": [
            {
              "line": 195,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/production/alerting.py": {
          "dummy_implementations": [
            {
              "line": 299,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Send webhook notification (mock implementation)\"\"\""
            },
            {
              "line": 305,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Send email notification (mock implementation)\"\"\""
            },
            {
              "line": 311,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Send Slack notification (mock implementation)\"\"\""
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/production/scaling.py": {
          "dummy_implementations": [
            {
              "line": 166,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 333,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock TDA context"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/production/monitoring.py": {
          "dummy_implementations": [
            {
              "line": 122,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 248,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock health check implementation"
            },
            {
              "line": 332,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock TDA metrics update"
            }
          ],
          "missing_features": [
            {
              "category": "observability",
              "expected": [
                "opentelemetry",
                "prometheus",
                "jaeger"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/distributed/consensus.py": {
          "dummy_implementations": [
            {
              "line": 368,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [
            {
              "category": "distributed",
              "expected": [
                "ray",
                "dask",
                "horovod",
                "deepspeed"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/distributed/ray_orchestrator.py": {
          "dummy_implementations": [
            {
              "line": 281,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock agent initialization - replace with actual agent classes"
            },
            {
              "line": 294,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return MockAgent(\"observer\", {"
            },
            {
              "line": 301,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return MockAgent(\"analyst\", {"
            },
            {
              "line": 308,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return MockAgent(\"supervisor\", {"
            },
            {
              "line": 315,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return MockAgent(\"executor\", {"
            },
            {
              "line": 322,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return MockAgent(\"coordinator\", {"
            },
            {
              "line": 428,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock resource usage - replace with actual monitoring"
            },
            {
              "line": 450,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockAgent:"
            },
            {
              "line": 451,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock agent for testing and development\"\"\""
            },
            {
              "line": 458,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock agent processing\"\"\""
            },
            {
              "line": 501,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "logger.warning(\"Ray Serve not available, using mock mode\")"
            },
            {
              "line": 527,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock deployment for testing"
            },
            {
              "line": 533,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "logger.info(f\"Mock deployment created: {deployment_name}\")"
            },
            {
              "line": 615,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock response for testing"
            },
            {
              "line": 616,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "response_data = await self._mock_deployment_response(request, deployment_name)"
            },
            {
              "line": 628,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"current_load\": 0.5,  # Mock load"
            },
            {
              "line": 664,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "async def _mock_deployment_response("
            },
            {
              "line": 669,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock deployment response for testing\"\"\""
            },
            {
              "line": 675,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"agent_instance_id\": f\"mock_{deployment_name}_{uuid.uuid4().hex[:8]}\","
            },
            {
              "line": 678,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"message\": f\"Mock response from {deployment_name}\","
            },
            {
              "line": 688,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"metadata\": {\"mock\": True}"
            },
            {
              "line": 701,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock scaling"
            },
            {
              "line": 703,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "logger.info(f\"Mock scaling {deployment_name} to {target_replicas} replicas\")"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/distributed/load_balancing.py": {
          "dummy_implementations": [
            {
              "line": 391,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 474,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [
            {
              "category": "distributed",
              "expected": [
                "ray",
                "dask",
                "horovod",
                "deepspeed"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/distributed/coordination_manager.py": {
          "dummy_implementations": [
            {
              "line": 88,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockMessageTransport:"
            },
            {
              "line": 89,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock message transport for testing\"\"\""
            },
            {
              "line": 111,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 131,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "self.transport = MockMessageTransport()"
            },
            {
              "line": 396,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock successful execution"
            },
            {
              "line": 507,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "cpu_usage=0.5,  # Mock CPU usage"
            },
            {
              "line": 508,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "memory_usage=0.3,  # Mock memory usage"
            },
            {
              "line": 546,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 635,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 651,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [
            {
              "category": "distributed",
              "expected": [
                "ray",
                "dask",
                "horovod",
                "deepspeed"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/distributed/coordination_core.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "distributed",
              "expected": [
                "ray",
                "dask",
                "horovod",
                "deepspeed"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/distributed/distributed_coordinator.py": {
          "dummy_implementations": [
            {
              "line": 43,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Create aliases and placeholders"
            },
            {
              "line": 47,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 50,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 53,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 56,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 513,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Execute requests (mock for now)"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/distributed/hierarchical_orchestrator.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "distributed",
              "expected": [
                "ray",
                "dask",
                "horovod",
                "deepspeed"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/distributed/__init__.py": {
          "dummy_implementations": [
            {
              "line": 33,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Create placeholder classes for missing exports"
            },
            {
              "line": 35,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Placeholder for distributed flow coordination.\"\"\""
            },
            {
              "line": 36,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 39,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Placeholder for hierarchical flow configuration.\"\"\""
            },
            {
              "line": 40,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 43,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Placeholder for flow execution results.\"\"\""
            },
            {
              "line": 44,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/distributed/test_distributed_coordination.py": {
          "dummy_implementations": [
            {
              "line": 15,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "from unittest.mock import Mock, AsyncMock"
            },
            {
              "line": 26,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockTDAIntegration:"
            },
            {
              "line": 27,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock TDA integration for testing\"\"\""
            },
            {
              "line": 84,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def mock_tda_integration(self):"
            },
            {
              "line": 85,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return MockTDAIntegration()"
            },
            {
              "line": 88,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def load_balancer(self, mock_tda_integration):"
            },
            {
              "line": 91,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "tda_integration=mock_tda_integration"
            },
            {
              "line": 173,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "async def test_tda_aware_selection(self, load_balancer, mock_tda_integration):"
            },
            {
              "line": 189,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mock_tda_integration.contexts[\"test-correlation\"] = Mock("
            },
            {
              "line": 239,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "async def test_load_metrics_update(self, load_balancer, mock_tda_integration):"
            },
            {
              "line": 270,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "assert len(mock_tda_integration.results) > 0"
            },
            {
              "line": 277,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def mock_tda_integration(self):"
            },
            {
              "line": 278,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return MockTDAIntegration()"
            },
            {
              "line": 281,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def mock_observability(self):"
            },
            {
              "line": 282,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mock = AsyncMock()"
            },
            {
              "line": 283,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return mock"
            },
            {
              "line": 286,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def coordination_manager(self, mock_tda_integration, mock_observability):"
            },
            {
              "line": 290,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "tda_integration=mock_tda_integration,"
            },
            {
              "line": 291,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "observability_manager=mock_observability"
            },
            {
              "line": 318,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "async def test_agent_request_execution(self, coordination_manager, mock_observability):"
            },
            {
              "line": 339,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "assert mock_observability.record_step_execution.call_count >= 1"
            },
            {
              "line": 476,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "tda_integration=MockTDAIntegration()"
            },
            {
              "line": 489,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "tda_integration = MockTDAIntegration()"
            },
            {
              "line": 529,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "tda_integration = MockTDAIntegration()"
            },
            {
              "line": 532,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "tda_integration.contexts[\"e2e-test\"] = Mock("
            }
          ],
          "missing_features": [
            {
              "category": "distributed",
              "expected": [
                "ray",
                "dask",
                "horovod",
                "deepspeed"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/distributed/test_hierarchical_orchestrator.py": {
          "dummy_implementations": [
            {
              "line": 230,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Test TDA integration (mock)\"\"\""
            },
            {
              "line": 231,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock TDA integration"
            },
            {
              "line": 232,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mock_tda = {'anomaly_detection': True}"
            },
            {
              "line": 234,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "orchestrator = create_hierarchical_orchestrator(tda_integration=mock_tda)"
            }
          ],
          "missing_features": [
            {
              "category": "distributed",
              "expected": [
                "ray",
                "dask",
                "horovod",
                "deepspeed"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/semantic/langgraph_orchestrator.py": {
          "dummy_implementations": [
            {
              "line": 575,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock enhanced execution (replace with actual agent calls)"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/semantic/semantic_patterns.py": {
          "dummy_implementations": [
            {
              "line": 153,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/semantic/base_interfaces.py": {
          "dummy_implementations": [
            {
              "line": 84,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 93,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 103,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 111,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 120,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 125,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/semantic/__init__.py": {
          "dummy_implementations": [
            {
              "line": 42,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "MockTDAIntegration"
            },
            {
              "line": 85,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"MockTDAIntegration\","
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/semantic/tda_integration.py": {
          "dummy_implementations": [
            {
              "line": 229,
              "pattern": "return\\s*{\\s*}",
              "code": "return {}"
            },
            {
              "line": 243,
              "pattern": "return\\s*{\\s*}",
              "code": "return {}"
            },
            {
              "line": 371,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockTDAIntegration(TDAIntegration):"
            },
            {
              "line": 373,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "Mock TDA integration for testing and development"
            },
            {
              "line": 385,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock context retrieval\"\"\""
            },
            {
              "line": 389,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Create mock context"
            },
            {
              "line": 394,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "current_patterns={\"mock_pattern\": 0.7},"
            },
            {
              "line": 396,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "metadata={\"source\": \"mock\", \"timestamp\": datetime.now(timezone.utc).isoformat()}"
            },
            {
              "line": 400,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock result sending\"\"\""
            },
            {
              "line": 405,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock pattern retrieval\"\"\""
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/durable/test_workflow_observability.py": {
          "dummy_implementations": [
            {
              "line": 19,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "from unittest.mock import Mock, AsyncMock, patch"
            },
            {
              "line": 28,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockTDAIntegration:"
            },
            {
              "line": 29,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock TDA integration for testing\"\"\""
            },
            {
              "line": 47,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def mock_tda_integration(self):"
            },
            {
              "line": 48,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock TDA integration for testing\"\"\""
            },
            {
              "line": 49,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return MockTDAIntegration()"
            },
            {
              "line": 52,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def observability_manager(self, mock_tda_integration):"
            },
            {
              "line": 53,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Create observability manager with mock TDA integration\"\"\""
            },
            {
              "line": 54,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return WorkflowObservabilityManager(tda_integration=mock_tda_integration)"
            },
            {
              "line": 278,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "async def test_health_check_tda_integration(self, observability_manager, mock_tda_integration):"
            },
            {
              "line": 289,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mock_tda_integration.health_status = {\"status\": \"degraded\", \"tda_available\": False}"
            },
            {
              "line": 495,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "async def test_tda_integration_span_sending(self, observability_manager, mock_tda_integration):"
            },
            {
              "line": 512,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "assert len(mock_tda_integration.results) > 0"
            },
            {
              "line": 516,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "for result, correlation_id in mock_tda_integration.results:"
            },
            {
              "line": 569,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mock_tda = MockTDAIntegration()"
            },
            {
              "line": 570,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "observability_manager = WorkflowObservabilityManager(tda_integration=mock_tda)"
            },
            {
              "line": 627,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "assert len(mock_tda.results) > 0"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/durable/test_saga_compensation.py": {
          "dummy_implementations": [
            {
              "line": 18,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "from unittest.mock import Mock, AsyncMock, patch"
            },
            {
              "line": 26,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "from ..semantic.tda_integration import MockTDAIntegration"
            },
            {
              "line": 33,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def mock_tda_integration(self):"
            },
            {
              "line": 34,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock TDA integration for testing\"\"\""
            },
            {
              "line": 35,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return MockTDAIntegration()"
            },
            {
              "line": 38,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def saga_orchestrator(self, mock_tda_integration):"
            },
            {
              "line": 39,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Create saga orchestrator with mock TDA integration\"\"\""
            },
            {
              "line": 40,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return SagaOrchestrator(tda_integration=mock_tda_integration)"
            },
            {
              "line": 86,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock TDA integration to return specific anomaly correlation"
            },
            {
              "line": 87,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "saga_orchestrator.tda_integration.correlate_with_anomalies = AsyncMock("
            },
            {
              "line": 95,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "SagaStep(\"step_1\", \"test_step\", Mock(), Mock(), {}, status=SagaStepStatus.FAILED)"
            },
            {
              "line": 141,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "async def mock_compensation(input_data):"
            },
            {
              "line": 146,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"test_step\", \"test\", Mock(), mock_compensation, {}"
            },
            {
              "line": 176,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"test_step\", \"test\", Mock(), slow_compensation, {}"
            },
            {
              "line": 192,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock TDA integration"
            },
            {
              "line": 193,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "saga_orchestrator.tda_integration.get_current_patterns = AsyncMock("
            },
            {
              "line": 197,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "step = SagaStep(\"test_step\", \"test_step\", Mock(), Mock(), {})"
            },
            {
              "line": 226,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Set up TDA integration mocks"
            },
            {
              "line": 227,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "saga_orchestrator.tda_integration.get_context = AsyncMock("
            },
            {
              "line": 230,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "saga_orchestrator.tda_integration.correlate_with_anomalies = AsyncMock("
            },
            {
              "line": 233,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "saga_orchestrator.tda_integration.send_orchestration_result = AsyncMock("
            },
            {
              "line": 371,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "orchestrator = SagaOrchestrator(tda_integration=MockTDAIntegration())"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/durable/checkpoint_manager.py": {
          "dummy_implementations": [
            {
              "line": 372,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "Manual intervention recovery (placeholder for human intervention)"
            },
            {
              "line": 396,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Placeholder for other storage backends (Redis, S3, etc.)"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/durable/workflow_observability.py": {
          "dummy_implementations": [
            {
              "line": 110,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockTracer:"
            },
            {
              "line": 111,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock tracer for environments without observability\"\"\""
            },
            {
              "line": 114,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return MockSpan(name)"
            },
            {
              "line": 116,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockSpan:"
            },
            {
              "line": 117,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Mock span for environments without observability\"\"\""
            },
            {
              "line": 151,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "self.tracer = tracer or MockTracer()"
            },
            {
              "line": 230,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 525,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/durable/saga_compensation_example.py": {
          "dummy_implementations": [
            {
              "line": 23,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "from ..semantic.tda_integration import MockTDAIntegration"
            },
            {
              "line": 33,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "self.tda_integration = MockTDAIntegration()"
            },
            {
              "line": 243,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Set up mock TDA integration"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/durable/temporal_orchestrator.py": {
          "dummy_implementations": [
            {
              "line": 264,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock step execution (replace with actual agent calls)"
            },
            {
              "line": 295,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock compensation (replace with actual compensation logic)"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/durable/hybrid_checkpointer.py": {
          "dummy_implementations": [
            {
              "line": 335,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 551,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock recovery - actual implementation would use checkpointer's get method"
            },
            {
              "line": 572,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock recovery - actual implementation would interact with Temporal.io"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/events/event_router.py": {
          "dummy_implementations": [
            {
              "line": 136,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            }
          ],
          "missing_features": [
            {
              "category": "streaming",
              "expected": [
                "kafka",
                "pulsar",
                "nats",
                "redpanda"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/events/event_patterns.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "streaming",
              "expected": [
                "kafka",
                "pulsar",
                "nats",
                "redpanda"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/events/consensus_orchestrator.py": {
          "dummy_implementations": [
            {
              "line": 350,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Get TDA context for agent (mock implementation)\"\"\""
            }
          ],
          "missing_features": [
            {
              "category": "streaming",
              "expected": [
                "kafka",
                "pulsar",
                "nats",
                "redpanda"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/events/semantic_orchestrator.py": {
          "dummy_implementations": [
            {
              "line": 87,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 113,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Get TDA anomaly score for event (mock implementation)\"\"\""
            }
          ],
          "missing_features": [
            {
              "category": "streaming",
              "expected": [
                "kafka",
                "pulsar",
                "nats",
                "redpanda"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/events/advanced_patterns.py": {
          "dummy_implementations": [
            {
              "line": 315,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [
            {
              "category": "streaming",
              "expected": [
                "kafka",
                "pulsar",
                "nats",
                "redpanda"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/events/test_semantic_orchestrator.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "streaming",
              "expected": [
                "kafka",
                "pulsar",
                "nats",
                "redpanda"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/events/__init__.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "streaming",
              "expected": [
                "kafka",
                "pulsar",
                "nats",
                "redpanda"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/observability/test_hybrid_observability.py": {
          "dummy_implementations": [
            {
              "line": 14,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "from unittest.mock import Mock, AsyncMock"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/observability/tracers.py": {
          "dummy_implementations": [
            {
              "line": 93,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Create mock span context\"\"\""
            },
            {
              "line": 94,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "async def _mock_span():"
            },
            {
              "line": 101,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return Effect(_mock_span)"
            },
            {
              "line": 135,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mock_context = SpanContext("
            },
            {
              "line": 140,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return SpanManager(tracer, mock_context)"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/observability/collectors.py": {
          "dummy_implementations": [
            {
              "line": 69,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Send to Arize (mock implementation)"
            },
            {
              "line": 97,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Send to LangSmith (mock implementation)"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/workflows/nodes/observer.py": {
          "dummy_implementations": [
            {
              "line": 283,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# For now, return mock data"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/workflows/nodes/analyst.py": {
          "dummy_implementations": [
            {
              "line": 267,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Placeholder - implement temporal analysis"
            },
            {
              "line": 275,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Placeholder - implement statistical analysis"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/distributed/crewai/test_geometric_space.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "distributed",
              "expected": [
                "ray",
                "dask",
                "horovod",
                "deepspeed"
              ]
            },
            {
              "category": "observability",
              "expected": [
                "opentelemetry",
                "prometheus",
                "jaeger"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/distributed/crewai/geometric_space.py": {
          "dummy_implementations": [
            {
              "line": 60,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 74,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            }
          ],
          "missing_features": [
            {
              "category": "observability",
              "expected": [
                "opentelemetry",
                "prometheus",
                "jaeger"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/distributed/crewai/flow_engine.py": {
          "dummy_implementations": [
            {
              "line": 70,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Execute tasks (mock for now)"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/distributed/crewai/__init__.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "distributed",
              "expected": [
                "ray",
                "dask",
                "horovod",
                "deepspeed"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "orchestration/distributed/crewai/test_orchestrator.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "distributed",
              "expected": [
                "ray",
                "dask",
                "horovod",
                "deepspeed"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "persistence": {
      "total_files": 1,
      "dummy_files": 1,
      "needs_update": 1,
      "missing_init": true,
      "missing_tests": true,
      "files": {
        "persistence/state_manager.py": {
          "dummy_implementations": [
            {
              "line": 170,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [
            "insecure pickle usage"
          ],
          "security_issues": []
        }
      }
    },
    "real_components": {
      "total_files": 3,
      "dummy_files": 3,
      "needs_update": 0,
      "missing_init": true,
      "missing_tests": true,
      "files": {
        "real_components/real_moe_router.py": {
          "dummy_implementations": [
            {
              "line": 3,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "Based on Google's Switch Transformer - NO MOCKS"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "real_components/real_spiking_gnn.py": {
          "dummy_implementations": [
            {
              "line": 3,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "Based on Intel Loihi patterns - NO MOCKS"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "real_components/real_multimodal.py": {
          "dummy_implementations": [
            {
              "line": 3,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "Based on OpenAI CLIP and latest transformers - NO MOCKS"
            },
            {
              "line": 136,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Generate dummy image"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "research_2025": {
      "total_files": 3,
      "dummy_files": 0,
      "needs_update": 3,
      "missing_init": true,
      "missing_tests": true,
      "files": {
        "research_2025/mixture_of_agents.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "research_2025/graph_of_thoughts.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "research_2025/constitutional_ai_v2.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "vector_db",
              "expected": [
                "faiss",
                "qdrant",
                "pinecone",
                "weaviate",
                "milvus"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "resilience": {
      "total_files": 6,
      "dummy_files": 4,
      "needs_update": 0,
      "missing_init": false,
      "missing_tests": true,
      "files": {
        "resilience/metrics.py": {
          "dummy_implementations": [
            {
              "line": 279,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# For now, return a placeholder"
            },
            {
              "line": 285,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# For now, return a placeholder"
            },
            {
              "line": 357,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Placeholder - would aggregate from actual retry data"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "resilience/circuit_breaker.py": {
          "dummy_implementations": [
            {
              "line": 382,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "resilience/timeout.py": {
          "dummy_implementations": [
            {
              "line": 602,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 607,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "resilience/bulkhead.py": {
          "dummy_implementations": [
            {
              "line": 702,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "routing": {
      "total_files": 2,
      "dummy_files": 0,
      "needs_update": 0,
      "missing_init": true,
      "missing_tests": true,
      "files": {}
    },
    "security": {
      "total_files": 2,
      "dummy_files": 2,
      "needs_update": 1,
      "missing_init": true,
      "missing_tests": true,
      "files": {
        "security/hash_with_carry.py": {
          "dummy_implementations": [
            {
              "line": 107,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 114,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 168,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 178,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 185,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 573,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [
            "insecure pickle usage"
          ],
          "security_issues": []
        },
        "security/kmux_ebpf.py": {
          "dummy_implementations": [
            {
              "line": 108,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 120,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 598,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "spiking": {
      "total_files": 3,
      "dummy_files": 1,
      "needs_update": 1,
      "missing_init": true,
      "missing_tests": true,
      "files": {
        "spiking/council_sgnn.py": {
          "dummy_implementations": [
            {
              "line": 126,
              "pattern": "pass\\s*$",
              "code": "# Forward pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "spiking/real_spiking_networks.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "spiking_gnn": {
      "total_files": 2,
      "dummy_files": 0,
      "needs_update": 0,
      "missing_init": true,
      "missing_tests": true,
      "files": {}
    },
    "streaming": {
      "total_files": 2,
      "dummy_files": 2,
      "needs_update": 0,
      "missing_init": true,
      "missing_tests": true,
      "files": {
        "streaming/kafka_integration.py": {
          "dummy_implementations": [
            {
              "line": 36,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockKafkaProducer:"
            },
            {
              "line": 47,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return MockFuture()"
            },
            {
              "line": 73,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockFuture:"
            },
            {
              "line": 75,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "return MockRecordMetadata()"
            },
            {
              "line": 77,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "class MockRecordMetadata:"
            },
            {
              "line": 95,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "logger.warning(f\"Failed to connect to Kafka, using mock: {e}\")"
            },
            {
              "line": 96,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "self.producer = MockKafkaProducer()"
            },
            {
              "line": 98,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "logger.warning(\"kafka-python not installed, using mock producer\")"
            },
            {
              "line": 99,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "self.producer = MockKafkaProducer()"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "streaming/pro_streaming_system.py": {
          "dummy_implementations": [
            {
              "line": 198,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 203,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 208,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 217,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 222,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 227,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 232,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "swarm_intelligence": {
      "total_files": 2,
      "dummy_files": 0,
      "needs_update": 0,
      "missing_init": false,
      "missing_tests": true,
      "files": {}
    },
    "tda": {
      "total_files": 25,
      "dummy_files": 12,
      "needs_update": 6,
      "missing_init": false,
      "missing_tests": true,
      "files": {
        "tda/benchmarks.py": {
          "dummy_implementations": [
            {
              "line": 359,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "bottleneck_distance_error=0.1,  # Placeholder"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "tda/algorithms.py": {
          "dummy_implementations": [
            {
              "line": 3,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "NO DUMMY DATA - ACTUAL TOPOLOGICAL COMPUTATIONS"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "tda/unified_engine_2025.py": {
          "dummy_implementations": [
            {
              "line": 578,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            },
            {
              "line": 603,
              "pattern": "return\\s*\\[\\s*\\]",
              "code": "return []"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "tda/core.py": {
          "dummy_implementations": [
            {
              "line": 277,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 349,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock computation for demonstration"
            },
            {
              "line": 355,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Generate mock persistence diagrams"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "tda/models.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "ai_patterns",
              "expected": [
                "transformer",
                "attention",
                "diffusion",
                "mamba",
                "flash_attention"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "tda/matrix_ph_gpu.py": {
          "dummy_implementations": [
            {
              "line": 309,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "tda/phformer_integration.py": {
          "dummy_implementations": [],
          "missing_features": [],
          "outdated_patterns": [
            "dangerous eval/exec"
          ],
          "security_issues": []
        },
        "tda/topo_fuzzer_pro.py": {
          "dummy_implementations": [
            {
              "line": 338,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# For demo, return mock persistence pairs"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "tda/real_algorithms_fixed.py": {
          "dummy_implementations": [
            {
              "line": 4,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "NO DUMMIES, NO MOCKS, NO PLACEHOLDERS"
            },
            {
              "line": 103,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "No dummies, no placeholders - everything computes real results"
            },
            {
              "line": 333,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# This is a placeholder for neural persistence methods"
            },
            {
              "line": 550,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Add dummy diagonal points if needed"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "tda/cuda_kernels.py": {
          "dummy_implementations": [
            {
              "line": 393,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Generate mock persistence intervals"
            },
            {
              "line": 473,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 477,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "tda/multi_parameter_persistence.py": {
          "dummy_implementations": [
            {
              "line": 106,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "'entropy': np.array([[0.5]]),  # Dummy entropy"
            },
            {
              "line": 107,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "'amplitude': np.array([[1.0]]),  # Dummy amplitude"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "tda/streaming_processor.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "streaming",
              "expected": [
                "kafka",
                "pulsar",
                "nats",
                "redpanda"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "tda/unified_engine.py": {
          "dummy_implementations": [
            {
              "line": 131,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Placeholder - integrate actual algorithm"
            },
            {
              "line": 204,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Placeholder - integrate actual algorithm"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "tda/streaming/incremental_persistence.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "streaming",
              "expected": [
                "kafka",
                "pulsar",
                "nats",
                "redpanda"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "tda/streaming/windows.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "streaming",
              "expected": [
                "kafka",
                "pulsar",
                "nats",
                "redpanda"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "tda/streaming/parallel_processor.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "streaming",
              "expected": [
                "kafka",
                "pulsar",
                "nats",
                "redpanda"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "tda/streaming/event_adapters.py": {
          "dummy_implementations": [
            {
              "line": 62,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 92,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 133,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Placeholder - would use actual protobuf deserializer"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "tda/streaming/__init__.py": {
          "dummy_implementations": [
            {
              "line": 112,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Placeholder for missing multi_scale module"
            },
            {
              "line": 114,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Placeholder for multi-scale processor.\"\"\""
            },
            {
              "line": 115,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "testing": {
      "total_files": 8,
      "dummy_files": 6,
      "needs_update": 0,
      "missing_init": true,
      "missing_tests": true,
      "files": {
        "testing/test_config.py": {
          "dummy_implementations": [
            {
              "line": 9,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "from unittest.mock import Mock, AsyncMock"
            },
            {
              "line": 32,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 102,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def create_mock_neo4j_driver():"
            },
            {
              "line": 103,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Create a mock Neo4j driver for testing.\"\"\""
            },
            {
              "line": 104,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "driver = AsyncMock()"
            },
            {
              "line": 105,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "session = AsyncMock()"
            },
            {
              "line": 107,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock session methods"
            },
            {
              "line": 108,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "session.run = AsyncMock(return_value=AsyncMock())"
            },
            {
              "line": 109,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "session.__aenter__ = AsyncMock(return_value=session)"
            },
            {
              "line": 110,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "session.__aexit__ = AsyncMock(return_value=None)"
            },
            {
              "line": 112,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock driver methods"
            },
            {
              "line": 113,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "driver.session = Mock(return_value=session)"
            },
            {
              "line": 114,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "driver.verify_connectivity = AsyncMock()"
            },
            {
              "line": 115,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "driver.close = AsyncMock()"
            },
            {
              "line": 120,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def create_mock_redis_client():"
            },
            {
              "line": 121,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Create a mock Redis client for testing.\"\"\""
            },
            {
              "line": 122,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "client = AsyncMock()"
            },
            {
              "line": 124,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock common Redis operations"
            },
            {
              "line": 125,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "client.get = AsyncMock(return_value=None)"
            },
            {
              "line": 126,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "client.set = AsyncMock(return_value=True)"
            },
            {
              "line": 127,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "client.delete = AsyncMock(return_value=1)"
            },
            {
              "line": 128,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "client.exists = AsyncMock(return_value=0)"
            },
            {
              "line": 129,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "client.expire = AsyncMock(return_value=True)"
            },
            {
              "line": 130,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "client.ttl = AsyncMock(return_value=-1)"
            },
            {
              "line": 132,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock pub/sub"
            },
            {
              "line": 133,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "client.publish = AsyncMock(return_value=1)"
            },
            {
              "line": 134,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "client.subscribe = AsyncMock()"
            },
            {
              "line": 139,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def create_mock_kafka_producer():"
            },
            {
              "line": 140,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Create a mock Kafka producer for testing.\"\"\""
            },
            {
              "line": 141,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "producer = AsyncMock()"
            },
            {
              "line": 143,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "producer.send = AsyncMock(return_value=AsyncMock())"
            },
            {
              "line": 144,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "producer.flush = AsyncMock()"
            },
            {
              "line": 145,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "producer.close = AsyncMock()"
            },
            {
              "line": 150,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def create_mock_event_bus():"
            },
            {
              "line": 151,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Create a mock event bus for testing.\"\"\""
            },
            {
              "line": 152,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "bus = AsyncMock()"
            },
            {
              "line": 154,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "bus.publish = AsyncMock()"
            },
            {
              "line": 155,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "bus.subscribe = AsyncMock()"
            },
            {
              "line": 156,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "bus.unsubscribe = AsyncMock()"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "testing/advanced_chaos.py": {
          "dummy_implementations": [
            {
              "line": 279,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# This would integrate with actual service mocking"
            },
            {
              "line": 874,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "testing/cicd_automation.py": {
          "dummy_implementations": [
            {
              "line": 192,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 197,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 859,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock implementation - would run actual chaos test"
            },
            {
              "line": 1049,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Post to GitHub (mock implementation)"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "testing/chaos_engineering.py": {
          "dummy_implementations": [
            {
              "line": 214,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 620,
              "pattern": "return\\s*{\\s*}",
              "code": "return {}"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "testing/streaming_tda_tests.py": {
          "dummy_implementations": [
            {
              "line": 14,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "from unittest.mock import Mock, AsyncMock, patch"
            },
            {
              "line": 63,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "def mock_kafka_mesh(self):"
            },
            {
              "line": 64,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "\"\"\"Create a mock Kafka event mesh\"\"\""
            },
            {
              "line": 65,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mesh = AsyncMock(spec=KafkaEventMesh)"
            },
            {
              "line": 66,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mesh.send = AsyncMock()"
            },
            {
              "line": 67,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "mesh.consume_batch = AsyncMock(return_value=[])"
            },
            {
              "line": 269,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Create mocks"
            },
            {
              "line": 270,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "kafka_mesh = AsyncMock(spec=KafkaEventMesh)"
            },
            {
              "line": 271,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "kafka_mesh.consume_batch = AsyncMock(return_value=[])"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "testing/benchmark_framework.py": {
          "dummy_implementations": [
            {
              "line": 223,
              "pattern": "raise\\s+NotImplementedError",
              "code": "raise NotImplementedError"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "utils": {
      "total_files": 5,
      "dummy_files": 1,
      "needs_update": 3,
      "missing_init": false,
      "missing_tests": true,
      "files": {
        "utils/decorators.py": {
          "dummy_implementations": [],
          "missing_features": [],
          "outdated_patterns": [
            "blocking sleep instead of async"
          ],
          "security_issues": []
        },
        "utils/logging.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "observability",
              "expected": [
                "opentelemetry",
                "prometheus",
                "jaeger"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        },
        "utils/validation.py": {
          "dummy_implementations": [
            {
              "line": 146,
              "pattern": "pass\\s*$",
              "code": "pass"
            },
            {
              "line": 159,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "utils/logger.py": {
          "dummy_implementations": [],
          "missing_features": [
            {
              "category": "observability",
              "expected": [
                "opentelemetry",
                "prometheus",
                "jaeger"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    },
    "workflows": {
      "total_files": 4,
      "dummy_files": 2,
      "needs_update": 1,
      "missing_init": false,
      "missing_tests": true,
      "files": {
        "workflows/real_temporal_workflows.py": {
          "dummy_implementations": [
            {
              "line": 30,
              "pattern": "pass\\s*$",
              "code": "pass"
            }
          ],
          "missing_features": [],
          "outdated_patterns": [],
          "security_issues": []
        },
        "workflows/gpu_allocation.py": {
          "dummy_implementations": [
            {
              "line": 131,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# For now, mock implementation"
            },
            {
              "line": 237,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Create mock vote based on task analysis"
            },
            {
              "line": 266,
              "pattern": "dummy|mock|fake|placeholder",
              "code": "# Mock allocation"
            }
          ],
          "missing_features": [
            {
              "category": "gpu_accel",
              "expected": [
                "cuda",
                "triton",
                "tensorrt",
                "onnx"
              ]
            }
          ],
          "outdated_patterns": [],
          "security_issues": []
        }
      }
    }
  }
}